this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};(function(e,t,s,r){"use strict";const o={subscribe(e){void t.Core.getStore().dispatch("messages/comments/subscribe",e);return s.runAction(r.RestMethod.imV2ChatCommentSubscribe,{data:{postId:e,createIfNotExists:true,autoJoin:true}}).catch((([e])=>{console.error("CommentsService: subscribe error",e)}))},unsubscribe(e){void t.Core.getStore().dispatch("messages/comments/unsubscribe",e);return s.runAction(r.RestMethod.imV2ChatCommentUnsubscribe,{data:{postId:e,createIfNotExists:true,autoJoin:true}}).catch((([e])=>{console.error("CommentsService: unsubscribe error",e)}))},readAllChannelComments(e){const o=t.Core.getStore().getters["chats/get"](e,true);const n=t.Core.getStore().getters["counters/getChannelCommentsCounter"](o.chatId);if(n===0){return Promise.resolve()}void t.Core.getStore().dispatch("counters/readAllChannelComments",o.chatId);return s.runAction(r.RestMethod.imV2ChatCommentReadAll,{data:{dialogId:e}}).catch((([e])=>{console.error("CommentsService: readAllChannelComments error",e)}))}};e.CommentsService=o})(this.BX.Messenger.v2.Service=this.BX.Messenger.v2.Service||{},BX.Messenger.v2.Application,BX.Messenger.v2.Lib,BX.Messenger.v2.Const);
//# sourceMappingURL=comments.bundle.map.js
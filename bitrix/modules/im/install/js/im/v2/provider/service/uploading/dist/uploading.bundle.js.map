{"version":3,"file":"uploading.bundle.js","sources":["../src/classes/uploader-wrapper.js","../src/uploading.js","../src/multi-uploading.js"],"sourcesContent":["import { BaseEvent, EventEmitter } from 'main.core.events';\nimport { Uploader, UploaderEvent } from 'ui.uploader.core';\n\nimport { EventType } from 'im.v2.const';\n\nimport type { UploaderFile } from 'ui.uploader.core';\nimport type { MessageWithFile } from '../types/uploading';\n\nexport type UploaderWrapperOptions = {\n\tdiskFolderId: number,\n\tuploaderId: string,\n\tchatId: number,\n\tdialogId: string,\n\tautoUpload: boolean,\n\tmaxParallelLoads: number,\n\tmaxParallelUploads: number,\n}\n\nconst MAX_FILES_IN_ONE_MESSAGE = 10;\n\nexport class UploaderWrapper extends EventEmitter\n{\n\t#uploaderRegistry: {[uploaderId: string]: Uploader} = {};\n\t#onUploadCancelHandler: Function;\n\n\tstatic eventNamespace = 'BX.Messenger.v2.Service.Uploading.UploaderWrapper';\n\n\tstatic events = {\n\t\tonFileAddStart: 'onFileAddStart',\n\t\tonFileAdd: 'onFileAdd',\n\t\tonFileUploadStart: 'onFileUploadStart',\n\t\tonFileUploadProgress: 'onFileUploadProgress',\n\t\tonFileUploadComplete: 'onFileUploadComplete',\n\t\tonFileUploadError: 'onFileUploadError',\n\t\tonFileUploadCancel: 'onFileUploadCancel',\n\t\tonMaxFileCountExceeded: 'onMaxFileCountExceeded',\n\t\tonUploadComplete: 'onUploadComplete',\n\t};\n\n\tconstructor()\n\t{\n\t\tsuper();\n\t\tthis.setEventNamespace(UploaderWrapper.eventNamespace);\n\n\t\tthis.#onUploadCancelHandler = this.#onUploadCancel.bind(this);\n\t\tEventEmitter.subscribe(EventType.uploader.cancel, this.#onUploadCancelHandler);\n\t}\n\n\tcreateUploader(options: UploaderWrapperOptions)\n\t{\n\t\tconst {\n\t\t\tdiskFolderId,\n\t\t\tuploaderId,\n\t\t\tchatId,\n\t\t\tdialogId,\n\t\t\tautoUpload = false,\n\t\t\tmaxParallelLoads,\n\t\t\tmaxParallelUploads,\n\t\t} = options;\n\n\t\tthis.#uploaderRegistry[uploaderId] = new Uploader({\n\t\t\tautoUpload,\n\t\t\tmaxParallelLoads,\n\t\t\tmaxParallelUploads,\n\t\t\tcontroller: 'disk.uf.integration.diskUploaderController',\n\t\t\tmultiple: true,\n\t\t\tcontrollerOptions: {\n\t\t\t\tfolderId: diskFolderId,\n\t\t\t\tchat: {\n\t\t\t\t\tchatId,\n\t\t\t\t\tdialogId,\n\t\t\t\t},\n\t\t\t},\n\t\t\timageResizeWidth: 1280,\n\t\t\timageResizeHeight: 1280,\n\t\t\timageResizeMode: 'contain',\n\t\t\timageResizeFilter: (file: UploaderFile) => {\n\t\t\t\treturn !file.getCustomData('sendAsFile') && !file.isAnimated();\n\t\t\t},\n\t\t\timageResizeMimeType: 'image/jpeg',\n\t\t\timageResizeMimeTypeMode: 'force',\n\t\t\timagePreviewHeight: 720,\n\t\t\timagePreviewWidth: 720,\n\t\t\ttreatOversizeImageAsFile: true,\n\t\t\tignoreUnknownImageTypes: true,\n\t\t\tmaxFileSize: null,\n\t\t\tevents: {\n\t\t\t\t[UploaderEvent.FILE_ADD_START]: (event) => {\n\t\t\t\t\tthis.emit(UploaderWrapper.events.onFileAddStart, { ...event.getData(), uploaderId });\n\t\t\t\t},\n\t\t\t\t[UploaderEvent.FILE_UPLOAD_START]: (event) => {\n\t\t\t\t\tthis.emit(UploaderWrapper.events.onFileUploadStart, { ...event.getData(), uploaderId });\n\t\t\t\t},\n\t\t\t\t[UploaderEvent.FILE_ADD]: (event) => {\n\t\t\t\t\tthis.emit(UploaderWrapper.events.onFileAdd, { ...event.getData(), uploaderId });\n\t\t\t\t},\n\t\t\t\t[UploaderEvent.FILE_UPLOAD_PROGRESS]: (event) => {\n\t\t\t\t\tthis.emit(UploaderWrapper.events.onFileUploadProgress, { ...event.getData(), uploaderId });\n\t\t\t\t},\n\t\t\t\t[UploaderEvent.FILE_UPLOAD_COMPLETE]: (event) => {\n\t\t\t\t\tthis.emit(UploaderWrapper.events.onFileUploadComplete, { ...event.getData(), uploaderId });\n\t\t\t\t},\n\t\t\t\t[UploaderEvent.ERROR]: (event) => {\n\t\t\t\t\tthis.emit(UploaderWrapper.events.onFileUploadError, { ...event.getData(), uploaderId });\n\t\t\t\t},\n\t\t\t\t[UploaderEvent.FILE_ERROR]: (event) => {\n\t\t\t\t\tthis.emit(UploaderWrapper.events.onFileUploadError, { ...event.getData(), uploaderId });\n\t\t\t\t},\n\t\t\t\t[UploaderEvent.MAX_FILE_COUNT_EXCEEDED]: (event) => {\n\t\t\t\t\tthis.emit(UploaderWrapper.events.onMaxFileCountExceeded, { ...event.getData(), uploaderId });\n\t\t\t\t},\n\t\t\t\t[UploaderEvent.UPLOAD_COMPLETE]: (event) => {\n\t\t\t\t\tthis.emit(UploaderWrapper.events.onUploadComplete, { ...event.getData(), uploaderId });\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tstart(uploaderId: string)\n\t{\n\t\tthis.#uploaderRegistry[uploaderId].setAutoUpload(true);\n\t\tthis.#uploaderRegistry[uploaderId].start();\n\t}\n\n\tstop(uploaderId: string)\n\t{\n\t\tthis.#uploaderRegistry[uploaderId].stop();\n\t}\n\n\tdestroyUploader(uploaderId: string)\n\t{\n\t\tthis.#uploaderRegistry[uploaderId].destroy({ removeFilesFromServer: false });\n\t\tdelete this.#uploaderRegistry[uploaderId];\n\t}\n\n\taddFiles(tasks: MessageWithFile[]): UploaderFile[]\n\t{\n\t\tconst firstTenTasks = tasks.slice(0, MAX_FILES_IN_ONE_MESSAGE);\n\n\t\tconst addedFiles = [];\n\t\tfirstTenTasks.forEach((task) => {\n\t\t\tconst file = this.#addFile(task);\n\t\t\tif (file)\n\t\t\t{\n\t\t\t\taddedFiles.push(file);\n\t\t\t}\n\t\t});\n\n\t\treturn addedFiles;\n\t}\n\n\tgetFiles(uploaderId): UploaderFile[]\n\t{\n\t\treturn this.#uploaderRegistry[uploaderId].getFiles();\n\t}\n\n\t#addFile(task: MessageWithFile): ?UploaderFile\n\t{\n\t\treturn this.#uploaderRegistry[task.uploaderId].addFile(\n\t\t\ttask.file,\n\t\t\t{\n\t\t\t\tid: task.tempFileId,\n\t\t\t\tcustomData: {\n\t\t\t\t\tdialogId: task.dialogId,\n\t\t\t\t\tchatId: task.chatId,\n\t\t\t\t\ttempMessageId: task.tempMessageId,\n\t\t\t\t\tsendAsFile: task.sendAsFile,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\t#onUploadCancel(event: BaseEvent)\n\t{\n\t\tconst { tempFileId, tempMessageId } = event.getData();\n\t\tif (!tempFileId || !tempMessageId)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#removeFileFromUploader(tempFileId);\n\t\tthis.emit(UploaderWrapper.events.onFileUploadCancel, { tempMessageId, tempFileId });\n\t}\n\n\t#removeFileFromUploader(tempFileId: string)\n\t{\n\t\tconst uploaderList = Object.values(this.#uploaderRegistry);\n\t\tfor (const uploader of uploaderList)\n\t\t{\n\t\t\tif (!uploader.getFile)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst file = uploader.getFile(tempFileId);\n\t\t\tif (file)\n\t\t\t{\n\t\t\t\tfile.remove();\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tdestroy()\n\t{\n\t\tEventEmitter.unsubscribe(EventType.uploader.cancel, this.#onUploadCancelHandler);\n\t}\n}\n","import { Type } from 'main.core';\nimport { BaseEvent, EventEmitter } from 'main.core.events';\nimport { getFilesFromDataTransfer, isFilePasted } from 'ui.uploader.core';\nimport { runAction } from 'im.v2.lib.rest';\n\nimport { Core } from 'im.v2.application.core';\nimport { FileStatus, FileType, RestMethod } from 'im.v2.const';\nimport { Utils } from 'im.v2.lib.utils';\nimport { Logger } from 'im.v2.lib.logger';\nimport { Notifier } from 'im.v2.lib.notifier';\nimport { SendingService } from 'im.v2.provider.service.sending';\n\nimport { UploaderWrapper } from './classes/uploader-wrapper';\n\nimport type { ImModelChat, ImModelUser, ImModelMessage, ImModelFile } from 'im.v2.model';\nimport type { UploaderFile, UploaderError } from 'ui.uploader.core';\nimport type { Store } from 'ui.vue3.vuex';\nimport type { RestClient } from 'rest.client';\nimport type {\n\tMessageWithFile,\n\tFileFromDisk,\n\tFileCommitParams,\n\tUploadFilesParams,\n\tUploadFromClipboardParams,\n\tUploadFromInputParams,\n\tUploadFromDragAndDrop,\n} from './types/uploading';\n\ntype CreateUploaderParams = {\n\tdialogId: number,\n\tautoUpload: boolean,\n\tmaxParallelUploads: number,\n\tmaxParallelLoads: number,\n};\n\nconst EVENT_NAMESPACE = 'BX.Messenger.v2.Service.UploadingService';\n\nexport class UploadingService extends EventEmitter\n{\n\t#store: Store;\n\t#restClient: RestClient;\n\t#isRequestingDiskFolderId: boolean = false;\n\t#diskFolderIdRequestPromise: { [string]: Promise } = {};\n\t#uploaderWrapper: UploaderWrapper;\n\t#sendingService: SendingService;\n\t#uploaderFilesRegistry: {\n\t\t[uploaderId: string]: {\n\t\t\tautoUpload: boolean,\n\t\t\twasSent: boolean,\n\t\t\ttext: string,\n\t\t\tdialogId: string,\n\t\t\ttempMessageId: string,\n\t\t\tpreviewCreatedStatus: { [string]: boolean },\n\t\t\tpreviewSentStatus: { [string]: boolean },\n\t\t}\n\t} = {};\n\n\tstatic event = {\n\t\tuploadStart: 'uploadStart',\n\t\tuploadComplete: 'uploadComplete',\n\t\tuploadError: 'uploadError',\n\t\tuploadCancel: 'uploadCancel',\n\t};\n\n\t#queue: Array<string> = [];\n\t#isUploading: boolean = false;\n\n\tstatic instance = null;\n\n\tstatic getInstance(): UploadingService\n\t{\n\t\tif (!this.instance)\n\t\t{\n\t\t\tthis.instance = new this();\n\t\t}\n\n\t\treturn this.instance;\n\t}\n\n\tconstructor()\n\t{\n\t\tsuper();\n\t\tthis.setEventNamespace(EVENT_NAMESPACE);\n\n\t\tthis.#store = Core.getStore();\n\t\tthis.#restClient = Core.getRestClient();\n\t\tthis.#sendingService = SendingService.getInstance();\n\t\tthis.#initUploader();\n\t}\n\n\tasync uploadFromClipboard(params: UploadFromClipboardParams): Promise<{files: UploaderFile[], uploaderId: string}>\n\t{\n\t\tconst { clipboardEvent, dialogId, autoUpload, imagesOnly } = params;\n\n\t\tconst { clipboardData } = clipboardEvent;\n\t\tif (!clipboardData || !isFilePasted(clipboardData))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\tclipboardEvent.preventDefault();\n\n\t\tlet files: File[] = await getFilesFromDataTransfer(clipboardData);\n\t\tif (imagesOnly)\n\t\t{\n\t\t\tfiles = files.filter((file) => Utils.file.isImage(file.name));\n\t\t\tif (imagesOnly.length === 0)\n\t\t\t{\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\tconst { uploaderFiles, uploaderId } = await this.addFiles({\n\t\t\tfiles,\n\t\t\tdialogId,\n\t\t\tautoUpload,\n\t\t});\n\n\t\tif (uploaderFiles.length === 0)\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\treturn uploaderId;\n\t}\n\n\tasync uploadFromInput(params: UploadFromInputParams): Promise<string>\n\t{\n\t\tconst { event, sendAsFile, autoUpload, dialogId } = params;\n\t\tconst rawFiles = Object.values(event.target.files);\n\t\tif (rawFiles.length === 0)\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\tconst { uploaderId } = await this.addFiles({\n\t\t\tfiles: rawFiles,\n\t\t\tdialogId,\n\t\t\tautoUpload,\n\t\t\tsendAsFile,\n\t\t});\n\n\t\treturn uploaderId;\n\t}\n\n\tasync uploadFromDragAndDrop(params: UploadFromDragAndDrop): Promise<string>\n\t{\n\t\tconst { event, dialogId, autoUpload, sendAsFile } = params;\n\t\tevent.preventDefault();\n\n\t\tconst rawFiles = await getFilesFromDataTransfer(event.dataTransfer);\n\t\tif (rawFiles.length === 0)\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\tconst { uploaderId } = await this.addFiles({\n\t\t\tfiles: rawFiles,\n\t\t\tdialogId,\n\t\t\tautoUpload,\n\t\t\tsendAsFile,\n\t\t});\n\n\t\treturn uploaderId;\n\t}\n\n\t#createUploader(params: CreateUploaderParams): Promise<string>\n\t{\n\t\tconst {\n\t\t\tdialogId,\n\t\t\tautoUpload,\n\t\t\tmaxParallelUploads,\n\t\t\tmaxParallelLoads,\n\t\t} = params;\n\n\t\tconst uploaderId = Utils.text.getUuidV4();\n\t\tconst chatId = this.#getChatId(dialogId);\n\n\t\treturn this.checkDiskFolderId(dialogId).then((diskFolderId: number) => {\n\t\t\tthis.#uploaderWrapper.createUploader({\n\t\t\t\tdiskFolderId,\n\t\t\t\tuploaderId,\n\t\t\t\tautoUpload,\n\t\t\t\tchatId,\n\t\t\t\tdialogId,\n\t\t\t\tmaxParallelUploads,\n\t\t\t\tmaxParallelLoads,\n\t\t\t});\n\n\t\t\treturn uploaderId;\n\t\t});\n\t}\n\n\taddFiles(params: UploadFilesParams): Promise<{uploaderFiles: UploaderFile[], uploaderId: string}>\n\t{\n\t\tconst {\n\t\t\tfiles,\n\t\t\tdialogId,\n\t\t\tautoUpload,\n\t\t\tsendAsFile = false,\n\t\t\tmaxParallelUploads,\n\t\t\tmaxParallelLoads,\n\t\t} = params;\n\n\t\tconst uploaderParams: CreateUploaderParams = {\n\t\t\tdialogId,\n\t\t\tautoUpload,\n\t\t\tmaxParallelUploads,\n\t\t\tmaxParallelLoads,\n\t\t};\n\n\t\treturn this.#createUploader(uploaderParams).then((uploaderId: string) => {\n\t\t\tconst filesForUploader = [];\n\t\t\tfiles.forEach((file) => {\n\t\t\t\tconst preparedFile = this.#prepareFileForUploader(file, dialogId, uploaderId, sendAsFile);\n\t\t\t\tfilesForUploader.push(preparedFile);\n\t\t\t});\n\n\t\t\tconst addedFiles = this.#uploaderWrapper.addFiles(filesForUploader);\n\t\t\tthis.#registerFiles(uploaderId, addedFiles, dialogId, autoUpload);\n\n\t\t\treturn {\n\t\t\t\tuploaderFiles: addedFiles,\n\t\t\t\tuploaderId,\n\t\t\t};\n\t\t});\n\t}\n\n\tgetFiles(uploaderId): UploaderFile[]\n\t{\n\t\treturn this.#uploaderWrapper.getFiles(uploaderId);\n\t}\n\n\t#addToQueue(uploaderId: string)\n\t{\n\t\tthis.#queue.push(uploaderId);\n\t\tthis.#processQueue();\n\t}\n\n\t#processQueue()\n\t{\n\t\tif (this.#isUploading || this.#queue.length === 0)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#isUploading = true;\n\n\t\tconst uploaderId: string = this.#queue.shift();\n\t\tthis.#uploaderFilesRegistry[uploaderId].autoUpload = true;\n\t\tthis.#uploaderWrapper.start(uploaderId);\n\t}\n\n\tstart(uploaderId: string)\n\t{\n\t\tthis.#addToQueue(uploaderId);\n\t}\n\n\tstop(uploaderId: string)\n\t{\n\t\tthis.#uploaderWrapper.stop(uploaderId);\n\t}\n\n\tuploadFileFromDisk(files, dialogId)\n\t{\n\t\tObject.values(files).forEach((file) => {\n\t\t\tconst messageWithFile = this.#prepareFileFromDisk(file, dialogId);\n\n\t\t\tthis.#addFileFromDiskToModel(messageWithFile).then(() => {\n\t\t\t\tconst message = {\n\t\t\t\t\ttempMessageId: messageWithFile.tempMessageId,\n\t\t\t\t\tfileIds: [messageWithFile.tempFileId],\n\t\t\t\t\tdialogId: messageWithFile.dialogId,\n\t\t\t\t};\n\n\t\t\t\treturn this.#sendingService.sendMessageWithFiles(message);\n\t\t\t}).then(() => {\n\t\t\t\tthis.commitFile({\n\t\t\t\t\tchatId: messageWithFile.chatId,\n\t\t\t\t\ttemporaryFileId: messageWithFile.tempFileId,\n\t\t\t\t\ttempMessageId: messageWithFile.tempMessageId,\n\t\t\t\t\trealFileId: messageWithFile.file.id.slice(1),\n\t\t\t\t\tfromDisk: true,\n\t\t\t\t});\n\t\t\t}).catch((error) => {\n\t\t\t\tconsole.error('SendingService: sendFilesFromDisk error:', error);\n\t\t\t});\n\t\t});\n\t}\n\n\t#addFileFromDiskToModel(messageWithFile: MessageWithFile): Promise\n\t{\n\t\treturn this.#store.dispatch('files/add', {\n\t\t\tid: messageWithFile.tempFileId,\n\t\t\tchatId: messageWithFile.chatId,\n\t\t\tauthorId: Core.getUserId(),\n\t\t\tname: messageWithFile.file.name,\n\t\t\ttype: Utils.file.getFileTypeByExtension(messageWithFile.file.ext),\n\t\t\textension: messageWithFile.file.ext,\n\t\t\tsize: messageWithFile.file.sizeInt,\n\t\t\tstatus: FileStatus.wait,\n\t\t\tprogress: 0,\n\t\t\tauthorName: this.#getCurrentUser().name,\n\t\t});\n\t}\n\n\t#initUploader()\n\t{\n\t\tthis.#uploaderWrapper = new UploaderWrapper();\n\t\tthis.#uploaderWrapper.subscribe(UploaderWrapper.events.onFileAddStart, (event: BaseEvent) => {\n\t\t\tconst { file } = event.getData();\n\t\t\tthis.#addFileToStore(file);\n\t\t});\n\n\t\tthis.#uploaderWrapper.subscribe(UploaderWrapper.events.onFileAdd, (event: BaseEvent) => {\n\t\t\tconst { file, uploaderId } = event.getData();\n\t\t\tthis.#updateFilePreviewInStore(file);\n\t\t\tthis.#setPreviewCreatedStatus(uploaderId, file.getId());\n\t\t\tthis.#tryToSendMessage(uploaderId);\n\t\t});\n\n\t\tthis.#uploaderWrapper.subscribe(UploaderWrapper.events.onFileUploadStart, (event: BaseEvent) => {\n\t\t\tconst { file } = event.getData();\n\t\t\tthis.#updateFileSizeInStore(file);\n\t\t\tthis.emit(UploadingService.event.uploadStart);\n\t\t});\n\n\t\tthis.#uploaderWrapper.subscribe(UploaderWrapper.events.onFileUploadProgress, (event: BaseEvent) => {\n\t\t\tconst { file } = event.getData();\n\t\t\tthis.#updateFileProgress(file.getId(), file.getProgress(), FileStatus.upload);\n\t\t});\n\n\t\tthis.#uploaderWrapper.subscribe(UploaderWrapper.events.onFileUploadComplete, async (event: BaseEvent) => {\n\t\t\tconst { file, uploaderId }: {file: UploaderFile, uploaderId: string} = event.getData();\n\t\t\tconst serverFileId: number = file.getServerFileId().toString().slice(1);\n\t\t\tconst temporaryFileId: string = file.getId();\n\t\t\tif (this.#isMediaFile(temporaryFileId))\n\t\t\t{\n\t\t\t\tthis.#setFileMapping({ serverFileId, temporaryFileId });\n\t\t\t}\n\n\t\t\tthis.#updateFileProgress(temporaryFileId, file.getProgress(), FileStatus.wait);\n\n\t\t\tawait this.#uploadPreview(file);\n\t\t\tthis.#setPreviewSentStatus(uploaderId, temporaryFileId);\n\n\t\t\tvoid this.#tryCommit(uploaderId);\n\t\t\tthis.emit(UploadingService.event.uploadComplete);\n\t\t});\n\n\t\tthis.#uploaderWrapper.subscribe(UploaderWrapper.events.onFileUploadError, (event: BaseEvent) => {\n\t\t\tconst { file, error, uploaderId } = event.getData();\n\n\t\t\tthis.#setMessageError(file.getCustomData('tempMessageId'));\n\n\t\t\tthis.getFiles(uploaderId).forEach((uploaderFile: UploaderFile) => {\n\t\t\t\tthis.#updateFileProgress(uploaderFile.getId(), 0, FileStatus.error);\n\t\t\t});\n\n\t\t\tif (this.#isMaxFileSizeExceeded(error))\n\t\t\t{\n\t\t\t\tNotifier.file.handleUploadError(error);\n\t\t\t}\n\n\t\t\tLogger.error('UploadingService: upload error', error);\n\t\t\tthis.emit(UploadingService.event.uploadError);\n\n\t\t\tthis.#isUploading = false;\n\t\t\tthis.#processQueue();\n\t\t\tthis.stop(uploaderId);\n\t\t});\n\n\t\tthis.#uploaderWrapper.subscribe(UploaderWrapper.events.onFileUploadCancel, (event: BaseEvent) => {\n\t\t\tconst { tempMessageId, tempFileId } = event.getData();\n\t\t\tthis.#cancelUpload(tempMessageId, tempFileId);\n\t\t\tthis.emit(UploadingService.event.uploadCancel);\n\t\t});\n\n\t\tthis.#uploaderWrapper.subscribe(UploaderWrapper.events.onUploadComplete, () => {\n\t\t\tthis.#isUploading = false;\n\t\t\tthis.#processQueue();\n\t\t});\n\t}\n\n\t#isMediaFile(fileId: string | number): boolean\n\t{\n\t\tconst mediaFileTypes: Array<string> = [FileType.image, FileType.video];\n\t\tconst file: ?ImModelFile = this.#store.getters['files/get'](fileId);\n\n\t\treturn Boolean(file) && mediaFileTypes.includes(file.type);\n\t}\n\n\t#setFileMapping(options: {serverFileId: number, temporaryFileId: string})\n\t{\n\t\tvoid this.#store.dispatch('files/setTemporaryFileMapping', options);\n\t}\n\n\tcheckDiskFolderId(dialogId: string): Promise<number>\n\t{\n\t\tif (this.#getDiskFolderId(dialogId) > 0)\n\t\t{\n\t\t\treturn Promise.resolve(this.#getDiskFolderId(dialogId));\n\t\t}\n\n\t\tif (this.#isRequestingDiskFolderId)\n\t\t{\n\t\t\treturn this.#diskFolderIdRequestPromise[dialogId];\n\t\t}\n\n\t\tthis.#diskFolderIdRequestPromise[dialogId] = this.#requestDiskFolderId(dialogId);\n\n\t\treturn this.#diskFolderIdRequestPromise[dialogId];\n\t}\n\n\t#requestDiskFolderId(dialogId: string): Promise\n\t{\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.#isRequestingDiskFolderId = true;\n\n\t\t\tconst chatId = this.#getChatId(dialogId);\n\t\t\tthis.#restClient.callMethod(RestMethod.imDiskFolderGet, { chat_id: chatId }).then((response) => {\n\t\t\t\tconst { ID: diskFolderId } = response.data();\n\t\t\t\tthis.#isRequestingDiskFolderId = false;\n\t\t\t\tvoid this.#store.dispatch('chats/update', {\n\t\t\t\t\tdialogId,\n\t\t\t\t\tfields: {\n\t\t\t\t\t\tdiskFolderId,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tresolve(diskFolderId);\n\t\t\t}).catch((error) => {\n\t\t\t\tthis.#isRequestingDiskFolderId = false;\n\t\t\t\treject(error);\n\t\t\t});\n\t\t});\n\t}\n\n\tcommitFile(params: FileCommitParams)\n\t{\n\t\tconst { temporaryFileId, tempMessageId, chatId, realFileId, fromDisk, messageText = '', sendAsFile = false } = params;\n\n\t\tconst fileIdParams = {};\n\t\tif (fromDisk)\n\t\t{\n\t\t\tfileIdParams.disk_id = realFileId;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfileIdParams.upload_id = realFileId.toString().slice(1);\n\t\t}\n\n\t\tthis.#restClient.callMethod(RestMethod.imDiskFileCommit, {\n\t\t\tchat_id: chatId,\n\t\t\tmessage: messageText,\n\t\t\ttemplate_id: tempMessageId,\n\t\t\tfile_template_id: temporaryFileId,\n\t\t\tas_file: sendAsFile ? 'Y' : 'N',\n\t\t\t...fileIdParams,\n\t\t}).catch((error) => {\n\t\t\tthis.#setMessageError(tempMessageId);\n\t\t\tthis.#updateFileProgress(temporaryFileId, 0, FileStatus.error);\n\t\t\tconsole.error('commitFile error', error);\n\t\t});\n\t}\n\n\tcommitMessage(uploaderId: string): Promise\n\t{\n\t\tconst dialogId = this.#uploaderFilesRegistry[uploaderId].dialogId;\n\t\tconst chatId = this.#getChatId(dialogId);\n\n\t\tconst fileIds = this.#uploaderWrapper.getFiles(uploaderId).map((file) => {\n\t\t\treturn file.getServerFileId().toString().slice(1);\n\t\t});\n\n\t\tconst sendAsFile = this.#uploaderWrapper.getFiles(uploaderId).every((file) => {\n\t\t\treturn file.getCustomData('sendAsFile');\n\t\t});\n\n\t\treturn this.#restClient.callMethod(RestMethod.imDiskFileCommit, {\n\t\t\tchat_id: chatId,\n\t\t\tmessage: this.#uploaderFilesRegistry[uploaderId].text,\n\t\t\ttemplate_id: this.#uploaderFilesRegistry[uploaderId].tempMessageId,\n\t\t\t// file_template_id: temporaryFileId,\n\t\t\tas_file: sendAsFile ? 'Y' : 'N',\n\t\t\tupload_id: fileIds,\n\t\t});\n\t}\n\n\tasync #tryCommit(uploaderId: string)\n\t{\n\t\tif (!this.#readyToCommit(uploaderId))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.commitMessage(uploaderId);\n\t\tthis.#destroyUploader(uploaderId);\n\t}\n\n\tasync #uploadPreview(file: UploaderFile): Promise\n\t{\n\t\tconst needPreview = this.#getFileType(file.getBinary()) === FileType.video || file.isAnimated();\n\t\tif (!needPreview)\n\t\t{\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst id = file.getServerFileId().toString().slice(1);\n\t\tconst previewFile = file.getClientPreview();\n\t\tif (!previewFile)\n\t\t{\n\t\t\tfile.setCustomData('sendAsFile', true);\n\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst formData = new FormData();\n\t\tformData.append('id', id);\n\t\tformData.append('previewFile', previewFile, `preview_${file.getName()}.jpg`);\n\n\t\treturn runAction(RestMethod.imDiskFilePreviewUpload, { data: formData })\n\t\t\t.catch(([error]) => {\n\t\t\t\tconsole.error('imDiskFilePreviewUpload request error', error);\n\t\t\t});\n\t}\n\n\t#prepareFileForUploader(file: File, dialogId: string, uploaderId, sendAsFile: boolean): MessageWithFile\n\t{\n\t\tconst tempMessageId = Utils.text.getUuidV4();\n\t\tconst tempFileId = Utils.text.getUuidV4();\n\t\tconst chatId = this.#getChatId(dialogId);\n\n\t\treturn {\n\t\t\ttempMessageId,\n\t\t\ttempFileId,\n\t\t\tfile,\n\t\t\tdialogId,\n\t\t\tchatId,\n\t\t\tuploaderId,\n\t\t\tsendAsFile,\n\t\t};\n\t}\n\n\t#updateFileProgress(id: string, progress: number, status: string)\n\t{\n\t\tvoid this.#store.dispatch('files/update', {\n\t\t\tid,\n\t\t\tfields: {\n\t\t\t\tprogress: (progress === 100 ? 99 : progress),\n\t\t\t\tstatus,\n\t\t\t},\n\t\t});\n\t}\n\n\t#cancelUpload(tempMessageId: string, tempFileId)\n\t{\n\t\tconst message: ImModelMessage = this.#store.getters['messages/getById'](tempMessageId);\n\t\tif (message)\n\t\t{\n\t\t\tvoid this.#store.dispatch('messages/delete', { id: tempMessageId });\n\t\t\tvoid this.#store.dispatch('files/delete', { id: tempFileId });\n\n\t\t\tconst chat: ImModelChat = this.#store.getters['chats/getByChatId'](message.chatId);\n\t\t\tconst lastMessageId: string | number | null = this.#store.getters['messages/findLastChatMessageId'](message.chatId);\n\n\t\t\tif (Type.isString(lastMessageId) || Type.isNumber(lastMessageId))\n\t\t\t{\n\t\t\t\tvoid this.#store.dispatch('recent/update', {\n\t\t\t\t\tid: chat.dialogId,\n\t\t\t\t\tfields: { messageId: lastMessageId },\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvoid this.#store.dispatch('recent/delete', {\n\t\t\t\t\tid: chat.dialogId,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t#addFileToStore(file: UploaderFile)\n\t{\n\t\tconst taskId = file.getId();\n\t\tconst fileBinary = file.getBinary();\n\t\tconst previewData = this.#preparePreview(file);\n\t\tconst asFile = file.getCustomData('sendAsFile');\n\n\t\tvoid this.#store.dispatch('files/add', {\n\t\t\tid: taskId,\n\t\t\tchatId: file.getCustomData('chatId'),\n\t\t\tauthorId: Core.getUserId(),\n\t\t\tname: fileBinary.name,\n\t\t\tsize: file.getSize(),\n\t\t\ttype: asFile ? FileType.file : this.#getFileType(fileBinary),\n\t\t\textension: this.#getFileExtension(fileBinary),\n\t\t\tstatus: file.isFailed() ? FileStatus.error : FileStatus.progress,\n\t\t\tprogress: 0,\n\t\t\tauthorName: this.#getCurrentUser().name,\n\t\t\turlDownload: URL.createObjectURL(file.getBinary()),\n\t\t\t...previewData,\n\t\t});\n\t}\n\n\t#updateFilePreviewInStore(file: UploaderFile)\n\t{\n\t\tconst previewData = this.#preparePreview(file);\n\n\t\tvoid this.#store.dispatch('files/update', {\n\t\t\tid: file.getId(),\n\t\t\tfields: {\n\t\t\t\t...previewData,\n\t\t\t},\n\t\t});\n\t}\n\n\t#updateFileSizeInStore(file: UploaderFile)\n\t{\n\t\tvoid this.#store.dispatch('files/update', {\n\t\t\tid: file.getId(),\n\t\t\tfields: {\n\t\t\t\tsize: file.getSize(),\n\t\t\t},\n\t\t});\n\t}\n\n\t#preparePreview(file: UploaderFile): { image: { width: number, height: number }, urlPreview: Blob }\n\t{\n\t\tif (file.getCustomData('sendAsFile'))\n\t\t{\n\t\t\treturn {};\n\t\t}\n\n\t\tconst preview = {\n\t\t\tblob: file.getPreviewUrl(),\n\t\t\twidth: file.getPreviewWidth(),\n\t\t\theight: file.getPreviewHeight(),\n\t\t};\n\n\t\tconst previewData = {};\n\t\tif (preview.blob)\n\t\t{\n\t\t\tpreviewData.image = {\n\t\t\t\twidth: preview.width,\n\t\t\t\theight: preview.height,\n\t\t\t};\n\n\t\t\tpreviewData.urlPreview = preview.blob;\n\t\t}\n\n\t\tif (file.getClientPreview())\n\t\t{\n\t\t\tpreviewData.urlPreview = URL.createObjectURL(file.getClientPreview());\n\t\t}\n\n\t\treturn previewData;\n\t}\n\n\t#getDiskFolderId(dialogId: string): number\n\t{\n\t\treturn this.#getDialog(dialogId).diskFolderId;\n\t}\n\n\t#getFileType(file: File): string\n\t{\n\t\tlet fileType = FileType.file;\n\t\tif (file.type.startsWith('image'))\n\t\t{\n\t\t\tfileType = FileType.image;\n\t\t}\n\t\telse if (file.type.startsWith('video'))\n\t\t{\n\t\t\tfileType = FileType.video;\n\t\t}\n\n\t\treturn fileType;\n\t}\n\n\t#getFileExtension(file: File): string\n\t{\n\t\treturn file.name.split('.').splice(-1)[0];\n\t}\n\n\t#getDialog(dialogId: string): ImModelChat\n\t{\n\t\treturn this.#store.getters['chats/get'](dialogId);\n\t}\n\n\t#getCurrentUser(): ImModelUser\n\t{\n\t\tconst userId = Core.getUserId();\n\n\t\treturn this.#store.getters['users/get'](userId);\n\t}\n\n\t#getChatId(dialogId: string): ?number\n\t{\n\t\treturn this.#getDialog(dialogId)?.chatId;\n\t}\n\n\t#registerFiles(uploaderId: string, files: UploaderFile[], dialogId: string, autoUpload: boolean)\n\t{\n\t\tif (!this.#uploaderFilesRegistry[uploaderId])\n\t\t{\n\t\t\tthis.#uploaderFilesRegistry[uploaderId] = {\n\t\t\t\tpreviewCreatedStatus: {},\n\t\t\t\tpreviewSentStatus: {},\n\t\t\t\tdialogId,\n\t\t\t\ttext: '',\n\t\t\t\tautoUpload,\n\t\t\t};\n\t\t}\n\n\t\tfiles.forEach((file) => {\n\t\t\tconst fileId = file.getId();\n\t\t\tif (!this.#uploaderFilesRegistry[uploaderId].previewCreatedStatus)\n\t\t\t{\n\t\t\t\tthis.#uploaderFilesRegistry[uploaderId].previewCreatedStatus = {};\n\t\t\t}\n\n\t\t\tthis.#uploaderFilesRegistry[uploaderId].previewCreatedStatus[fileId] = false;\n\t\t\tthis.#uploaderFilesRegistry[uploaderId].previewSentStatus[fileId] = false;\n\t\t});\n\t}\n\n\t#unregisterFiles(uploaderId: string, files: UploaderFile[])\n\t{\n\t\tconst entry = this.#uploaderFilesRegistry[uploaderId];\n\t\tif (entry)\n\t\t{\n\t\t\tfiles.forEach((file: UploaderFile) => {\n\t\t\t\tconst fileId = file.getId();\n\t\t\t\tif (this.#uploaderFilesRegistry[uploaderId].previewCreatedStatus)\n\t\t\t\t{\n\t\t\t\t\tdelete this.#uploaderFilesRegistry[uploaderId].previewCreatedStatus[fileId];\n\t\t\t\t\tdelete this.#uploaderFilesRegistry[uploaderId].previewSentStatus[fileId];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t#setPreviewCreatedStatus(uploaderId: string, fileId: string)\n\t{\n\t\tthis.#uploaderFilesRegistry[uploaderId].previewCreatedStatus[fileId] = true;\n\t}\n\n\t#setPreviewSentStatus(uploaderId: string, fileId: string)\n\t{\n\t\tthis.#uploaderFilesRegistry[uploaderId].previewSentStatus[fileId] = true;\n\t}\n\n\t#setMessagesText(uploaderId: string, text: string)\n\t{\n\t\tthis.#uploaderFilesRegistry[uploaderId].text = text;\n\t}\n\n\t#setAutoUpload(uploaderId: string, autoUploadFlag: boolean)\n\t{\n\t\tthis.#uploaderFilesRegistry[uploaderId].autoUpload = autoUploadFlag;\n\t}\n\n\t// we don't use it now, because we always send several files in ONE message\n\t// noinspection JSUnusedGlobalSymbols\n\tsendSeparateMessagesWithFiles(params: { uploaderId: string, text: string})\n\t{\n\t\tconst { uploaderId, text } = params;\n\n\t\tthis.#setMessagesText(uploaderId, text);\n\t\tthis.#setAutoUpload(uploaderId, true);\n\t\tthis.#tryToSendMessages(uploaderId);\n\t}\n\n\tsendMessageWithFiles(params: { uploaderId: string, text: string})\n\t{\n\t\tconst { uploaderId, text } = params;\n\n\t\tthis.#setMessagesText(uploaderId, text);\n\t\tthis.#setAutoUpload(uploaderId, true);\n\t\tthis.#tryToSendMessage(uploaderId);\n\t}\n\n\t#createMessagesFromFiles(uploaderId): {comment: {text: string, dialogId: string}, files: []}\n\t{\n\t\tconst messagesToSend = {\n\t\t\tcomment: {},\n\t\t\tfiles: [],\n\t\t};\n\n\t\tconst files = this.getFiles(uploaderId);\n\t\tconst text = this.#uploaderFilesRegistry[uploaderId].text;\n\t\tconst dialogId = this.#uploaderFilesRegistry[uploaderId].dialogId;\n\t\tconst hasText = text.length > 0;\n\n\t\t// if we have more than one file and text, we need to send text message first\n\t\tif (files.length > 1 && hasText)\n\t\t{\n\t\t\tmessagesToSend.comment = { dialogId, text };\n\t\t}\n\n\t\tfiles.forEach((file) => {\n\t\t\tif (file.getError())\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst messageId = Utils.text.getUuidV4();\n\n\t\t\tfile.setCustomData('messageId', messageId);\n\t\t\tif (files.length === 1 && hasText)\n\t\t\t{\n\t\t\t\tfile.setCustomData('messageText', text);\n\t\t\t}\n\n\t\t\tmessagesToSend.files.push({\n\t\t\t\tfileIds: [file.getId()],\n\t\t\t\ttempMessageId: file.getCustomData('tempMessageId'),\n\t\t\t\tdialogId,\n\t\t\t\ttext: file.getCustomData('messageText') ?? '',\n\t\t\t});\n\t\t});\n\n\t\treturn messagesToSend;\n\t}\n\n\t#createMessageFromFiles(uploaderId): {text: string, dialogId: string, tempMessageId: string, fileIds: []}\n\t{\n\t\tconst fileIds = [];\n\t\tconst files = this.getFiles(uploaderId);\n\t\tfiles.forEach((file) => {\n\t\t\tif (!file.getError())\n\t\t\t{\n\t\t\t\tfileIds.push(file.getId());\n\t\t\t}\n\t\t});\n\n\t\tconst text = this.#uploaderFilesRegistry[uploaderId].text;\n\t\tconst dialogId = this.#uploaderFilesRegistry[uploaderId].dialogId;\n\n\t\tconst tempMessageId = files[0].getCustomData('tempMessageId');\n\t\tthis.#uploaderFilesRegistry[uploaderId].tempMessageId = tempMessageId;\n\n\t\treturn {\n\t\t\tfileIds,\n\t\t\ttempMessageId,\n\t\t\tdialogId,\n\t\t\ttext,\n\t\t};\n\t}\n\n\t#readyToAddMessages(uploaderId): boolean\n\t{\n\t\tif (\n\t\t\t!this.#uploaderFilesRegistry[uploaderId]\n\t\t\t|| !this.#uploaderFilesRegistry[uploaderId].autoUpload\n\t\t\t|| this.#uploaderFilesRegistry[uploaderId].wasSent\n\t\t)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\tconst { previewCreatedStatus } = this.#uploaderFilesRegistry[uploaderId];\n\n\t\treturn Object.values(previewCreatedStatus).every((flag) => flag === true);\n\t}\n\n\t#readyToCommit(uploaderId: string): boolean\n\t{\n\t\tif (!this.#uploaderFilesRegistry[uploaderId])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\tconst { previewSentStatus } = this.#uploaderFilesRegistry[uploaderId];\n\n\t\treturn Object.values(previewSentStatus).every((flag) => flag === true);\n\t}\n\n\t#tryToSendMessage(uploaderId: string)\n\t{\n\t\tif (!this.#readyToAddMessages(uploaderId))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#uploaderFilesRegistry[uploaderId].wasSent = true;\n\n\t\tconst message = this.#createMessageFromFiles(uploaderId);\n\t\tvoid this.#sendingService.sendMessageWithFiles(message);\n\t\tthis.start(uploaderId);\n\t}\n\n\t// we don't use it now, because we always send several files in ONE message\n\t// noinspection JSUnusedGlobalSymbols\n\t#tryToSendMessages(uploaderId: string)\n\t{\n\t\tif (!this.#readyToAddMessages(uploaderId))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#uploaderFilesRegistry[uploaderId].wasSent = true;\n\t\tconst { comment, files } = this.#createMessagesFromFiles(uploaderId);\n\t\tif (comment.text)\n\t\t{\n\t\t\tthis.#sendingService.sendMessage(comment);\n\t\t}\n\n\t\tfiles.forEach((message) => {\n\t\t\tvoid this.#sendingService.sendMessageWithFiles(message);\n\t\t});\n\t\tthis.start(uploaderId);\n\t}\n\n\t#prepareFileFromDisk(file: FileFromDisk, dialogId: string): MessageWithFile\n\t{\n\t\tconst tempMessageId = Utils.text.getUuidV4();\n\t\tconst realFileId = file.id.slice(1); // 'n123' => '123'\n\t\tconst tempFileId = `${tempMessageId}|${realFileId}`;\n\n\t\treturn {\n\t\t\ttempMessageId,\n\t\t\ttempFileId,\n\t\t\tdialogId,\n\t\t\tfile,\n\t\t\tchatId: this.#getDialog(dialogId).chatId,\n\t\t};\n\t}\n\n\t#isMaxFileSizeExceeded(error: UploaderError): boolean\n\t{\n\t\treturn error.getCode() === 'MAX_FILE_SIZE_EXCEEDED';\n\t}\n\n\t#setMessageError(tempMessageId: string)\n\t{\n\t\tvoid this.#store.dispatch('messages/update', {\n\t\t\tid: tempMessageId,\n\t\t\tfields: {\n\t\t\t\terror: true,\n\t\t\t},\n\t\t});\n\t}\n\n\tgetUploaderIdByFileId(fileId: string | number): ?string\n\t{\n\t\tconst uploaderIds: Array<string> = Object.keys(this.#uploaderFilesRegistry);\n\n\t\treturn uploaderIds.find((uploaderId: string) => {\n\t\t\treturn this.getFiles(uploaderId).some((file: UploaderFile) => {\n\t\t\t\treturn file.getId() === fileId;\n\t\t\t});\n\t\t});\n\t}\n\n\tremoveFileFromUploader(options: { uploaderId: string, filesIds: Array<string>, restartUploading: boolean })\n\t{\n\t\tconst { uploaderId, filesIds, restartUploading = false } = options;\n\n\t\tconst files: Array<UploaderFile> = this.#uploaderWrapper.getFiles(uploaderId).filter((file: UploaderFile) => {\n\t\t\treturn filesIds.includes(file.getId());\n\t\t});\n\n\t\tfiles.forEach((file: UploaderFile) => {\n\t\t\tfile.remove();\n\t\t\tfile.abort();\n\t\t});\n\n\t\tthis.#unregisterFiles(uploaderId, files);\n\n\t\tif (restartUploading)\n\t\t{\n\t\t\tconst [firstFile] = this.getFiles(uploaderId);\n\t\t\tif (firstFile)\n\t\t\t{\n\t\t\t\tfirstFile.upload();\n\t\t\t}\n\t\t}\n\t}\n\n\tdestroy()\n\t{\n\t\tthis.#uploaderWrapper.destroy();\n\t}\n\n\t#destroyUploader(uploaderId: string)\n\t{\n\t\tthis.#uploaderWrapper.destroyUploader(uploaderId);\n\t\tdelete this.#uploaderFilesRegistry[uploaderId];\n\t}\n\n\t#getBinaryFiles(uploaderId: string): Array<File>\n\t{\n\t\treturn this.getFiles(uploaderId).map((file: UploaderFile) => {\n\t\t\treturn file.getBinary();\n\t\t});\n\t}\n\n\tasync retry(uploaderId: string)\n\t{\n\t\tconst { dialogId, text, tempMessageId } = this.#uploaderFilesRegistry[uploaderId];\n\t\tconst sendAsFile: boolean = this.getFiles(uploaderId).some((file) => {\n\t\t\treturn file.getCustomData('sendAsFile');\n\t\t});\n\n\t\tconst binaryFiles: Array<File> = this.#getBinaryFiles(uploaderId);\n\n\t\tconst { uploaderId: newUploaderId } = await this.addFiles({\n\t\t\tdialogId,\n\t\t\tfiles: binaryFiles,\n\t\t\tsendAsFile,\n\t\t});\n\n\t\tvoid this.#store.dispatch('messages/delete', {\n\t\t\tid: tempMessageId,\n\t\t});\n\n\t\tthis.sendMessageWithFiles({\n\t\t\tuploaderId: newUploaderId,\n\t\t\ttext,\n\t\t});\n\n\t\tthis.#destroyUploader(uploaderId);\n\t}\n}\n","import { Utils } from 'im.v2.lib.utils';\nimport { Type } from 'main.core';\nimport { getFilesFromDataTransfer, isFilePasted, UploaderFile } from 'ui.uploader.core';\nimport { UploadingService } from './uploading';\n\nimport type {\n\tUploadFilesParams,\n\tUploadFromClipboardParams,\n\tUploadFromDragAndDrop,\n\tUploadFromInputParams,\n} from './types/uploading';\n\ntype AddFilesResult = {\n\tuploaderFiles: Array<UploaderFile>,\n\tuploaderId: string,\n};\n\ntype MakeChunksOptions<T> = {\n\tfiles: Array<T>,\n\tchunkSize?: number,\n\tmaxFilesCount?: number,\n};\n\nexport type MultiUploadingResult = {\n\tuploaderIds: Array<string>,\n\tsourceFilesCount: number,\n};\n\nconst MAX_FILES_COUNT_IN_ONE_MESSAGE = 10;\nconst MAX_FILES_COUNT = 100;\nconst MAX_PARALLEL_LOADS = 10;\nconst MAX_PARALLEL_UPLOADS = 3;\n\nexport class MultiUploadingService\n{\n\tstatic makeChunks<T>(options: MakeChunksOptions): Array<Array<T>>\n\t{\n\t\tconst {\n\t\t\tfiles,\n\t\t\tchunkSize = MAX_FILES_COUNT_IN_ONE_MESSAGE,\n\t\t\tmaxFilesCount = MAX_FILES_COUNT,\n\t\t}: MakeChunksOptions = options;\n\n\t\tconst chunks: Array<Array<T>> = [];\n\t\tif (Type.isArray(files))\n\t\t{\n\t\t\tconst preparedFiles: Array<T> = files.slice(0, maxFilesCount);\n\t\t\tfor (let i = 0; i < preparedFiles.length; i += chunkSize)\n\t\t\t{\n\t\t\t\tconst chunk = preparedFiles.slice(i, i + chunkSize);\n\t\t\t\tchunks.push(chunk);\n\t\t\t}\n\t\t}\n\n\t\treturn chunks;\n\t}\n\n\tstatic getMaxParallelLoads<T>(chunks: Array<Array<T>>): number\n\t{\n\t\treturn Math.floor(MAX_PARALLEL_LOADS / chunks.length);\n\t}\n\n\t#getUploadingService(): UploadingService\n\t{\n\t\treturn UploadingService.getInstance();\n\t}\n\n\tasync addFiles(params: UploadFilesParams): Promise<AddFilesResult>\n\t{\n\t\treturn this.#getUploadingService().addFiles(params);\n\t}\n\n\tasync uploadFromInput(params: UploadFromInputParams): Promise<MultiUploadingResult>\n\t{\n\t\tconst { event, sendAsFile, autoUpload, dialogId } = params;\n\t\tconst rawFiles = Object.values(event.target.files);\n\t\tconst chunks: Array<Array<File>> = MultiUploadingService.makeChunks({\n\t\t\tfiles: rawFiles,\n\t\t});\n\n\t\tconst addFilesResults: Array<AddFilesResult> = await Promise.all(\n\t\t\tchunks.map((chunk: Array<File>) => {\n\t\t\t\treturn this.addFiles({\n\t\t\t\t\tfiles: chunk,\n\t\t\t\t\tmaxParallelLoads: MultiUploadingService.getMaxParallelLoads(chunks),\n\t\t\t\t\tmaxParallelUploads: MAX_PARALLEL_UPLOADS,\n\t\t\t\t\tdialogId,\n\t\t\t\t\tautoUpload,\n\t\t\t\t\tsendAsFile,\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\n\t\tconst uploaderIds: Array<string> = addFilesResults.map(({ uploaderId }) => {\n\t\t\treturn uploaderId;\n\t\t});\n\t\tconst sourceFilesCount: number = rawFiles.length;\n\n\t\treturn {\n\t\t\tuploaderIds,\n\t\t\tsourceFilesCount,\n\t\t};\n\t}\n\n\tasync uploadFromClipboard(params: UploadFromClipboardParams): Promise<MultiUploadingResult>\n\t{\n\t\tconst { clipboardEvent, dialogId, autoUpload, imagesOnly } = params;\n\n\t\tconst { clipboardData } = clipboardEvent;\n\t\tif (!clipboardData || !isFilePasted(clipboardData))\n\t\t{\n\t\t\treturn {\n\t\t\t\tuploaderIds: [],\n\t\t\t\tsourceFilesCount: 0,\n\t\t\t};\n\t\t}\n\n\t\tclipboardEvent.preventDefault();\n\n\t\tlet files: Array<File> = await getFilesFromDataTransfer(clipboardData);\n\t\tif (imagesOnly)\n\t\t{\n\t\t\tfiles = files.filter((file) => Utils.file.isImage(file.name));\n\t\t\tif (imagesOnly.length === 0)\n\t\t\t{\n\t\t\t\treturn {\n\t\t\t\t\tuploaderIds: [],\n\t\t\t\t\tsourceFilesCount: 0,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tconst chunks: Array<Array<File>> = MultiUploadingService.makeChunks({\n\t\t\tfiles,\n\t\t});\n\n\t\tconst addFilesResults: Array<AddFilesResult> = await Promise.all(\n\t\t\tchunks.map((chunk: Array<File>) => {\n\t\t\t\treturn this.addFiles({\n\t\t\t\t\tfiles: chunk,\n\t\t\t\t\tmaxParallelLoads: MultiUploadingService.getMaxParallelLoads(chunks),\n\t\t\t\t\tmaxParallelUploads: MAX_PARALLEL_UPLOADS,\n\t\t\t\t\tdialogId,\n\t\t\t\t\tautoUpload,\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\n\t\tconst uploaderIds: Array<string> = addFilesResults\n\t\t\t.filter((addFilesResult: AddFilesResult) => {\n\t\t\t\treturn addFilesResult.uploaderFiles.length > 0;\n\t\t\t})\n\t\t\t.map(({ uploaderId }) => {\n\t\t\t\treturn uploaderId;\n\t\t\t});\n\t\tconst sourceFilesCount: number = files.length;\n\n\t\treturn {\n\t\t\tuploaderIds,\n\t\t\tsourceFilesCount,\n\t\t};\n\t}\n\n\tasync uploadFromDragAndDrop(params: UploadFromDragAndDrop): Promise<MultiUploadingResult>\n\t{\n\t\tconst { event, dialogId, autoUpload, sendAsFile } = params;\n\n\t\tconst rawFiles: Array<File> = await getFilesFromDataTransfer(event.dataTransfer);\n\t\tconst chunks: Array<Array<File>> = MultiUploadingService.makeChunks({\n\t\t\tfiles: rawFiles,\n\t\t});\n\n\t\tconst addFilesResults: Array<AddFilesResult> = await Promise.all(\n\t\t\tchunks.map((chunk: Array<File>) => {\n\t\t\t\treturn this.addFiles({\n\t\t\t\t\tfiles: chunk,\n\t\t\t\t\tmaxParallelLoads: MultiUploadingService.getMaxParallelLoads(chunks),\n\t\t\t\t\tmaxParallelUploads: MAX_PARALLEL_UPLOADS,\n\t\t\t\t\tdialogId,\n\t\t\t\t\tautoUpload,\n\t\t\t\t\tsendAsFile,\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\n\t\tconst uploaderIds: Array<string> = addFilesResults.map(({ uploaderId }) => {\n\t\t\treturn uploaderId;\n\t\t});\n\t\tconst sourceFilesCount: number = rawFiles.length;\n\n\t\treturn {\n\t\t\tuploaderIds,\n\t\t\tsourceFilesCount,\n\t\t};\n\t}\n}\n"],"names":["MAX_FILES_IN_ONE_MESSAGE","UploaderWrapper","EventEmitter","constructor","setEventNamespace","eventNamespace","bind","subscribe","EventType","uploader","cancel","createUploader","options","diskFolderId","uploaderId","chatId","dialogId","autoUpload","maxParallelLoads","maxParallelUploads","Uploader","controller","multiple","controllerOptions","folderId","chat","imageResizeWidth","imageResizeHeight","imageResizeMode","imageResizeFilter","file","getCustomData","isAnimated","imageResizeMimeType","imageResizeMimeTypeMode","imagePreviewHeight","imagePreviewWidth","treatOversizeImageAsFile","ignoreUnknownImageTypes","maxFileSize","events","UploaderEvent","FILE_ADD_START","event","emit","onFileAddStart","getData","FILE_UPLOAD_START","onFileUploadStart","FILE_ADD","onFileAdd","FILE_UPLOAD_PROGRESS","onFileUploadProgress","FILE_UPLOAD_COMPLETE","onFileUploadComplete","ERROR","onFileUploadError","FILE_ERROR","MAX_FILE_COUNT_EXCEEDED","onMaxFileCountExceeded","UPLOAD_COMPLETE","onUploadComplete","start","setAutoUpload","stop","destroyUploader","destroy","removeFilesFromServer","addFiles","tasks","firstTenTasks","slice","addedFiles","forEach","task","push","getFiles","unsubscribe","addFile","id","tempFileId","customData","tempMessageId","sendAsFile","onFileUploadCancel","uploaderList","Object","values","getFile","remove","EVENT_NAMESPACE","UploadingService","getInstance","instance","Core","getStore","getRestClient","SendingService","uploadFromClipboard","params","clipboardEvent","imagesOnly","clipboardData","isFilePasted","preventDefault","files","getFilesFromDataTransfer","filter","Utils","isImage","name","length","uploaderFiles","uploadFromInput","rawFiles","target","uploadFromDragAndDrop","dataTransfer","uploaderParams","then","filesForUploader","preparedFile","uploadFileFromDisk","messageWithFile","message","fileIds","sendMessageWithFiles","commitFile","temporaryFileId","realFileId","fromDisk","catch","error","console","checkDiskFolderId","Promise","resolve","messageText","fileIdParams","disk_id","upload_id","toString","callMethod","RestMethod","imDiskFileCommit","chat_id","template_id","file_template_id","as_file","FileStatus","commitMessage","map","getServerFileId","every","text","sendSeparateMessagesWithFiles","getUploaderIdByFileId","fileId","uploaderIds","keys","find","some","getId","removeFileFromUploader","filesIds","restartUploading","includes","abort","firstFile","upload","retry","binaryFiles","newUploaderId","dispatch","getUuidV4","shift","authorId","getUserId","type","getFileTypeByExtension","ext","extension","size","sizeInt","status","wait","progress","authorName","uploadStart","getProgress","serverFileId","uploadComplete","uploaderFile","Notifier","handleUploadError","Logger","uploadError","uploadCancel","mediaFileTypes","FileType","image","video","getters","Boolean","reject","imDiskFolderGet","response","ID","data","fields","needPreview","getBinary","previewFile","getClientPreview","setCustomData","formData","FormData","append","getName","runAction","imDiskFilePreviewUpload","lastMessageId","Type","isString","isNumber","messageId","taskId","fileBinary","previewData","asFile","getSize","isFailed","urlDownload","URL","createObjectURL","preview","blob","getPreviewUrl","width","getPreviewWidth","height","getPreviewHeight","urlPreview","fileType","startsWith","split","splice","userId","previewCreatedStatus","previewSentStatus","entry","autoUploadFlag","messagesToSend","comment","hasText","getError","wasSent","flag","sendMessage","getCode","MAX_FILES_COUNT_IN_ONE_MESSAGE","MAX_FILES_COUNT","MAX_PARALLEL_LOADS","MAX_PARALLEL_UPLOADS","MultiUploadingService","makeChunks","chunkSize","maxFilesCount","chunks","isArray","preparedFiles","i","chunk","getMaxParallelLoads","Math","floor","addFilesResults","all","sourceFilesCount","addFilesResult"],"mappings":"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"}
this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};(function(t,e,a,n,s,r,i,o,d,h,l,c,g,C,p,u,m){"use strict";const v={name:"TaskChatHeader",components:{ChatHeader:p.ChatHeader,UserCounter:p.UserCounter,LineLoader:g.LineLoader,FadeAnimation:C.FadeAnimation},props:{dialogId:{type:String,default:""}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isInited(){return this.dialog.inited}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<ChatHeader\n\t\t\t:dialogId="dialogId"\n\t\t\t:withAddToChatButton="false"\n\t\t>\n\t\t\t<template #left>\n\t\t\t\t<div class="bx-im-task-chat-header__left_container">\n\t\t\t\t\t<div class="bx-im-task-chat-header__avatar"></div>\n\t\t\t\t\t<div class="bx-im-task-chat-header__info">\n\t\t\t\t\t\t<div class="bx-im-task-chat-header__title">{{ loc('IM_TASK_CHAT_HEADER_TITLE') }}</div>\n\t\t\t\t\t\t<LineLoader v-if="!isInited" :width="50" :height="16" />\n\t\t\t\t\t\t<FadeAnimation :duration="100">\n\t\t\t\t\t\t\t<UserCounter v-if="isInited" :dialogId="dialogId" />\n\t\t\t\t\t\t</FadeAnimation>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t</ChatHeader>\n\t`};const b={name:"TaskChatContent",components:{BaseChatContent:p.BaseChatContent,TaskChatHeader:v,ChatTextarea:c.ChatTextarea},props:{dialogId:{type:String,default:""},withSidebar:{type:Boolean,default:true}},template:`\n\t\t<BaseChatContent :dialogId="dialogId" :withSidebar="withSidebar">\n\t\t\t<template #header>\n\t\t\t\t<TaskChatHeader :dialogId="dialogId" />\n\t\t\t</template>\n\t\t\t<template #textarea="{ onTextareaMount }">\n\t\t\t\t<ChatTextarea\n\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t:key="dialogId"\n\t\t\t\t\t:withMarket="false"\n\t\t\t\t\t:withAudioInput="false"\n\t\t\t\t\t:withAutoFocus="false"\n\t\t\t\t\t@mounted="onTextareaMount"\n\t\t\t\t/>\n\t\t\t</template>\n\t\t</BaseChatContent>\n\t`};const k=()=>{const t=new m.DemoChatBuilder;const{dialogId:e}=t.addChat();t.addMessage({text:e,componentId:u.MessageComponent.taskChatCreationMessage});t.save();return e};const I={name:"TaskChatPlaceholder",components:{TaskChatContent:b},props:{taskId:{type:[Number,String],required:true}},data(){return{fakeDialogId:"",chatMembersCount:1}},computed:{containerClasses(){const t=this.$store.getters["application/settings/get"](u.Settings.appearance.alignment);return[`--${t}-align`]},backgroundStyle(){return l.ThemeManager.getCurrentBackgroundStyle()}},created(){this.fakeDialogId=k();this.bindEvents()},beforeUnmount(){this.unbindEvents()},methods:{bindEvents(){h.EventEmitter.subscribe(u.EventType.task.onMembersCountChange,this.onMembersCountChange)},unbindEvents(){h.EventEmitter.unsubscribe(u.EventType.task.onMembersCountChange,this.onMembersCountChange)},onMembersCountChange(t){const{taskId:e,userCounter:a}=t.getData();if(e!==this.taskId){return}this.$store.dispatch("chats/update",{dialogId:this.fakeDialogId,fields:{userCounter:a}})}},template:`\n\t\t<div class="bx-im-task-chat-placeholder__container bx-im-messenger__scope">\n\t\t\t<TaskChatContent :dialogId="fakeDialogId" :withSidebar="false" />\n\t\t\t<div class="bx-im-task-chat-placeholder__overlay"></div>\n\t\t</div>\n\t`};const B={name:"TaskChatOpener",components:{TaskChatContent:b,TaskChatPlaceholder:I},props:{chatId:{type:Number,required:true},chatType:{type:String,required:true}},computed:{dialog(){return this.$store.getters["chats/getByChatId"](this.chatId,true)},dialogId(){return this.dialog.dialogId}},created(){this.registerSidebarConfig();return this.onChatOpen()},methods:{async onChatOpen(){if(this.dialog.inited){i.Logger.warn(`TaskChatOpener: chat ${this.chatId} is already loaded`);return}await this.loadChat()},async loadChat(){i.Logger.warn(`TaskChatOpener: loading chat ${this.chatId}`);await this.getChatService().loadChatByChatId(this.chatId);i.Logger.warn(`TaskChatOpener: chat ${this.chatId} is loaded`)},registerSidebarConfig(){const t=new d.SidebarConfig({blocks:[u.SidebarMainPanelBlock.task,u.SidebarMainPanelBlock.info,u.SidebarMainPanelBlock.fileList,u.SidebarMainPanelBlock.meetingList],headerMenuEnabled:false});d.SidebarManager.getInstance().registerConfig((t=>t.type===this.chatType),t)},getChatService(){if(!this.chatService){this.chatService=new o.ChatService}return this.chatService}},template:`\n\t\t<div class="bx-im-messenger__scope bx-im-task-chat-opener__container">\n\t\t\t<TaskChatContent :dialogId="dialogId" />\n\t\t</div>\n\t`};const M="TaskChatApplication";const f="TaskChatPlaceholderApplication";var T=babelHelpers.classPrivateFieldLooseKey("initPromise");var y=babelHelpers.classPrivateFieldLooseKey("init");class S{constructor(){Object.defineProperty(this,y,{value:w});Object.defineProperty(this,T,{writable:true,value:void 0});babelHelpers.classPrivateFieldLooseBase(this,T)[T]=babelHelpers.classPrivateFieldLooseBase(this,y)[y]()}ready(){return babelHelpers.classPrivateFieldLooseBase(this,T)[T]}async mount(t){await this.ready();const{rootContainer:n,chatId:s,onError:r,type:i}=t;if(!n){return Promise.reject(new Error("Provide node or selector for root container"))}if(!i){return Promise.reject(new Error("Provide custom chat type name for task chat"))}const o=e.Text.toCamelCase(i);return a.Core.createVue(this,{name:M,el:n,onError:r,components:{TaskChatOpener:B},template:`<TaskChatOpener :chatId="${s}" chatType="${o}" />`})}async mountPlaceholder(t){await this.ready();const{rootContainer:e,taskId:n}=t;if(!e){return Promise.reject(new Error("Provide node or selector for root container"))}return a.Core.createVue(this,{name:f,el:e,components:{TaskChatPlaceholder:I},template:`<TaskChatPlaceholder :taskId="${n}" />`})}}async function w(){await a.Core.ready();return this}t.TaskApplication=S})(this.BX.Messenger.v2.Application=this.BX.Messenger.v2.Application||{},BX,BX.Messenger.v2.Application,BX.Messenger.v2.Css,BX.Messenger.v2.Css,BX.Messenger.v2.Css,BX.Messenger.v2.Lib,BX.Messenger.v2.Service,BX.Messenger.v2.Lib,BX.Event,BX.Messenger.v2.Lib,BX.Messenger.v2.Component,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Component.Animation,BX.Messenger.v2.Component.Content,BX.Messenger.v2.Const,BX.Messenger.v2.Lib);
//# sourceMappingURL=task.bundle.map.js
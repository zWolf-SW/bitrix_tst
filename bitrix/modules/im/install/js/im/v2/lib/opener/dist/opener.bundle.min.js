this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};(function(e,t,n,a,r,s,i,o,l,g,c,d,u,p,y,I,L){"use strict";class m{async getDialogIdByUserCode(e){const t=await d.Core.getRestClient().callMethod(y.RestMethod.linesDialogGet,{USER_CODE:e}).catch((e=>{console.error("LinesService: error getting dialog id",e.error())}));const{dialog_id:n}=t.data();return n}}const M=e=>L.Utils.dialog.isLinesHistoryId(e)||L.Utils.dialog.isLinesExternalId(e);const S=e=>{const t=new URLSearchParams({[y.GetParameter.openHistory]:e,[y.GetParameter.backgroundType]:"light",[y.GetParameter.legacyMode]:"Y"});return`${y.Path.history}?${t.toString()}`};const v=e=>{if(u.Type.isString(e)){return e}if(u.Type.isNumber(e)){return e.toString()}return""};const C=()=>{const e=p.SidePanel.Instance;return I.LayoutManager.getInstance().isEmbeddedMode()&&e.getOpenSlidersCount()>0};const h=({navigationItem:e,dialogId:t,messageId:n})=>{const a=new URLSearchParams;const r=w(e);if(u.Type.isStringFilled(t)){a.append(r,t)}if(n>0){a.append(y.GetParameter.openMessage,n)}L.Utils.browser.openLink(`${y.Path.online}?${a.toString()}`)};const w=e=>{var t;const n={[y.NavigationMenuItem.chat]:y.GetParameter.openChat,[y.NavigationMenuItem.openlines]:y.GetParameter.openLines};return(t=n[e])!=null?t:y.GetParameter.openChat};const P={async openChat(e="",t=0){const n=e.toString();if(L.Utils.dialog.isLinesExternalId(n)){return this.openLines(n)}if(C()){h({navigationItem:y.NavigationMenuItem.chat,dialogId:n,messageId:t});return Promise.resolve()}await i.MessengerSlider.getInstance().openSlider();const a={name:y.Layout.chat.name,entityId:n};if(t>0){a.contextId=t}await I.LayoutManager.getInstance().setLayout(a);return Promise.resolve()},async openChatWithBotContext(e,t){const n=e.toString();const a=new l.BotContextService;a.scheduleContextRequest(n,t);return this.openChat(n)},async forwardEntityToChat(e,n){const a=e.toString();await i.MessengerSlider.getInstance().openSlider();const r={name:y.Layout.chat.name,entityId:a};await I.LayoutManager.getInstance().setLayout(r);t.EventEmitter.emit(y.EventType.textarea.forwardEntity,{dialogId:e,entityConfig:n});return Promise.resolve()},async openLines(e=""){let t=e.toString();if(L.Utils.dialog.isLinesExternalId(t)){const e=new m;t=await e.getDialogIdByUserCode(t)}if(C()){h({navigationItem:y.NavigationMenuItem.openlines,dialogId:t});return Promise.resolve()}await i.MessengerSlider.getInstance().openSlider();const n=o.FeatureManager.isFeatureAvailable(o.Feature.openLinesV2);return I.LayoutManager.getInstance().setLayout({name:n?y.Layout.openlinesV2.name:y.Layout.openlines.name,entityId:t})},async openCopilot(e="",t=0){const n=e.toString();await i.MessengerSlider.getInstance().openSlider();return I.LayoutManager.getInstance().setLayout({name:y.Layout.copilot.name,entityId:n,contextId:t})},async openCollab(e=""){const t=e.toString();if(!o.FeatureManager.collab.isAvailable()){o.FeatureManager.collab.openFeatureSlider();return null}await i.MessengerSlider.getInstance().openSlider();return I.LayoutManager.getInstance().setLayout({name:y.Layout.collab.name,entityId:t})},openHistory(e=""){if(L.Utils.dialog.isDialogId(e)){return this.openChat(e)}if(!M(e)){return Promise.reject()}const t=S(e);BX.SidePanel.Instance.open(t,{width:L.Utils.dialog.isLinesExternalId(e)?700:1e3,allowChangeHistory:false,allowChangeTitle:false,cacheable:false});return Promise.resolve()},async openNotifications(){await i.MessengerSlider.getInstance().openSlider();await I.LayoutManager.getInstance().setLayout({name:y.Layout.notification.name});t.EventEmitter.emit(y.EventType.layout.onOpenNotifications);return Promise.resolve()},async openRecentSearch(){await i.MessengerSlider.getInstance().openSlider();await I.LayoutManager.getInstance().setLayout({name:y.Layout.chat.name});t.EventEmitter.emit(y.EventType.recent.openSearch);return Promise.resolve()},async openSettings(e){r.Logger.warn("Slider: openSettings",e);await i.MessengerSlider.getInstance().openSlider();await I.LayoutManager.getInstance().setLayout({name:y.Layout.settings.name,entityId:e});return Promise.resolve()},openConference(e=""){r.Logger.warn("Slider: openConference",e);if(!L.Utils.conference.isValidCode(e)){return Promise.reject()}const t=L.Utils.conference.getUrlByCode(e);L.Utils.browser.openLink(t,L.Utils.conference.getWindowNameByCode(e));return Promise.resolve()},async openChatCreation(e,t={}){var n,a,s;r.Logger.warn("Slider: openChatCreation",e);g.CreateChatManager.getInstance().setPreselectedMembers((n=t.preselectedMembers)!=null?n:[]);g.CreateChatManager.getInstance().setIncludeCurrentUser((a=t.includeCurrentUser)!=null?a:true);g.CreateChatManager.getInstance().setOwnerId((s=t.ownerId)!=null?s:null);await i.MessengerSlider.getInstance().openSlider();const o={name:y.Layout.createChat.name,entityId:e};return I.LayoutManager.getInstance().setLayout(o)},startVideoCall(e="",t=true){r.Logger.warn("Slider: onStartVideoCall",e,t);if(!L.Utils.dialog.isDialogId(e)){r.Logger.error("Slider: onStartVideoCall - dialogId is not correct",e);return false}n.CallManager.getInstance().startCall(e,t);return Promise.resolve()},startPhoneCall(e,t){r.Logger.warn("Slider: startPhoneCall",e,t);void s.PhoneManager.getInstance().startCall(e,t);return Promise.resolve()},startCallList(e,t){r.Logger.warn("Slider: startCallList",e,t);s.PhoneManager.getInstance().startCallList(e,t);return Promise.resolve()},openNewTab(e){if(a.DesktopApi.isChatTab()&&a.DesktopApi.isFeatureSupported(a.DesktopFeature.openNewTab.id)){a.DesktopApi.createImTab(`${e}&${y.GetParameter.desktopChatTabMode}=Y`)}else{L.Utils.browser.openLink(e)}},async openNavigationItem(e){await i.MessengerSlider.getInstance().openSlider();c.NavigationManager.open({id:e.id.toString(),entityId:v(e.entityId),target:e.target})}};e.Opener=P})(this.BX.Messenger.v2.Lib=this.BX.Messenger.v2.Lib||{},BX.Event,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Service,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Application,BX,BX.SidePanel,BX.Messenger.v2.Const,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib);
//# sourceMappingURL=opener.bundle.map.js
this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(e,t,s,o,i,a,n,r,l,d,b){"use strict";const c={name:"KeyboardButton",props:{config:{type:Object,required:true},keyboardBlocked:{type:Boolean,required:true}},emits:["action","customCommand","blockKeyboard"],data(){return{}},computed:{button(){return this.config},buttonClasses(){const{bgColorToken:e=b.ColorToken.base,display:t,disabled:s,wait:o}=this.button;const i=t===b.KeyboardButtonDisplay.block?"--block":"--line";const a=[i,e];if(this.keyboardBlocked||s){a.push("--disabled")}if(o){a.push("--loading")}return a},buttonStyles(){const e={};const{width:t}=this.button;if(t){e.width=`${t}px`}return e}},methods:{onClick(){if(this.keyboardBlocked||this.button.disabled||this.button.wait){return}if(this.button.action&&this.button.actionValue){this.handleAction()}else if(this.button.appId){s.Logger.warn("Messenger keyboard: open app is not implemented.")}else if(this.button.link){const e=t.Text.decode(this.button.link);o.Utils.browser.openLink(e)}else if(this.button.command){this.handleCustomCommand()}},handleAction(){this.$emit("action",{action:this.button.action,payload:this.button.actionValue})},handleCustomCommand(){if(this.button.block){this.$emit("blockKeyboard")}this.button.wait=true;this.$emit("customCommand",{botId:this.button.botId,command:this.button.command,payload:this.button.commandParams})}},template:`\n\t\t<div\n\t\t\tclass="bx-im-keyboard-button__container"\n\t\t\t:class="buttonClasses"\n\t\t\t:style="buttonStyles"\n\t\t\t@click="onClick"\n\t\t>\n\t\t\t{{ button.text }}\n\t\t</div>\n\t`};const u={name:"KeyboardSeparator",data(){return{}},template:`\n\t\t<div class="bx-im-keyboard-button__separator"></div>\n\t`};var h=babelHelpers.classPrivateFieldLooseKey("dialogId");var p=babelHelpers.classPrivateFieldLooseKey("actionHandlers");var m=babelHelpers.classPrivateFieldLooseKey("sendMessage");var v=babelHelpers.classPrivateFieldLooseKey("insertText");var y=babelHelpers.classPrivateFieldLooseKey("startCall");var B=babelHelpers.classPrivateFieldLooseKey("copyText");var g=babelHelpers.classPrivateFieldLooseKey("openChat");class C{constructor(e){Object.defineProperty(this,g,{value:L});Object.defineProperty(this,B,{value:P});Object.defineProperty(this,y,{value:M});Object.defineProperty(this,v,{value:k});Object.defineProperty(this,m,{value:f});Object.defineProperty(this,h,{writable:true,value:void 0});Object.defineProperty(this,p,{writable:true,value:{[b.KeyboardButtonAction.send]:babelHelpers.classPrivateFieldLooseBase(this,m)[m].bind(this),[b.KeyboardButtonAction.put]:babelHelpers.classPrivateFieldLooseBase(this,v)[v].bind(this),[b.KeyboardButtonAction.call]:babelHelpers.classPrivateFieldLooseBase(this,y)[y].bind(this),[b.KeyboardButtonAction.copy]:babelHelpers.classPrivateFieldLooseBase(this,B)[B].bind(this),[b.KeyboardButtonAction.dialog]:babelHelpers.classPrivateFieldLooseBase(this,g)[g].bind(this)}});babelHelpers.classPrivateFieldLooseBase(this,h)[h]=e}handleAction(e){const{action:t,payload:s}=e;if(!babelHelpers.classPrivateFieldLooseBase(this,p)[p][t]){console.error("Keyboard: action not found")}babelHelpers.classPrivateFieldLooseBase(this,p)[p][t](s)}}function f(e){n.SendingService.getInstance().sendMessage({text:e,dialogId:babelHelpers.classPrivateFieldLooseBase(this,h)[h]})}function k(e){i.EventEmitter.emit(b.EventType.textarea.insertText,{text:e,dialogId:babelHelpers.classPrivateFieldLooseBase(this,h)[h]})}function M(e){r.PhoneManager.getInstance().startCall(e)}function P(e){var t;if((t=BX.clipboard)!=null&&t.copy(e)){l.Notifier.onCopyTextComplete()}}function L(e){a.Messenger.openChat(e)}var K=babelHelpers.classPrivateFieldLooseKey("messageId");var H=babelHelpers.classPrivateFieldLooseKey("dialogId");class I{constructor(e){Object.defineProperty(this,K,{writable:true,value:void 0});Object.defineProperty(this,H,{writable:true,value:void 0});const{messageId:t,dialogId:s}=e;babelHelpers.classPrivateFieldLooseBase(this,K)[K]=t;babelHelpers.classPrivateFieldLooseBase(this,H)[H]=s}sendCommand(e){const{botId:t,command:s,payload:o}=e;const i={MESSAGE_ID:babelHelpers.classPrivateFieldLooseBase(this,K)[K],DIALOG_ID:babelHelpers.classPrivateFieldLooseBase(this,H)[H],BOT_ID:t,COMMAND:s,COMMAND_PARAMS:o};d.Core.getRestClient().callMethod(b.RestMethod.imMessageCommand,i).catch((e=>{console.error("BotService: error sending command:",e.error())}))}}const F={props:{buttons:{type:Array,required:true},dialogId:{type:String,required:true},messageId:{type:[Number,String],required:true}},components:{KeyboardButton:c,KeyboardSeparator:u},data(){return{keyboardBlocked:false}},emits:["click"],watch:{buttons(){this.keyboardBlocked=false}},computed:{ButtonType:()=>b.KeyboardButtonType,preparedButtons(){return this.buttons.filter((e=>e.context!==b.KeyboardButtonContext.mobile))}},methods:{onButtonActionClick(e){this.getActionManager().handleAction(e)},onButtonCustomCommandClick(e){this.getBotService().sendCommand(e)},getActionManager(){if(!this.actionManager){this.actionManager=new C(this.dialogId)}return this.actionManager},getBotService(){if(!this.botService){this.botService=new I({messageId:this.messageId,dialogId:this.dialogId})}return this.botService}},template:`\n\t\t<div class="bx-im-keyboard__container">\n\t\t\t<template v-for="button in preparedButtons">\n\t\t\t\t<KeyboardButton\n\t\t\t\t\tv-if="button.type === ButtonType.button"\n\t\t\t\t\t:config="button"\n\t\t\t\t\t:keyboardBlocked="keyboardBlocked"\n\t\t\t\t\t@blockKeyboard="keyboardBlocked = true"\n\t\t\t\t\t@action="onButtonActionClick"\n\t\t\t\t\t@customCommand="onButtonCustomCommandClick"\n\t\t\t\t/>\n\t\t\t\t<KeyboardSeparator v-else-if="button.type === ButtonType.newLine" />\n\t\t\t</template>\n\t\t</div>\n\t`};e.Keyboard=F})(this.BX.Messenger.v2.Component.Elements=this.BX.Messenger.v2.Component.Elements||{},BX,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Event,BX.Messenger.v2.Lib,BX.Messenger.v2.Service,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Application,BX.Messenger.v2.Const);
//# sourceMappingURL=keyboard.bundle.map.js
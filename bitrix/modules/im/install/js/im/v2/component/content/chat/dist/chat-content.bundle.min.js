this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e,n,o,a,s,i,r,l,d,c,h,m,g,u,C,p,_,I,T,b,v,E,M,B,S,y,A,L,f,x,N,O,P,D,w,k,H){"use strict";const R={name:"CommentsButton",components:{FloatButton:N.FloatButton},props:{counter:{type:Number,required:true}},computed:{floatButtonProps(){return{icon:N.FloatButtonIcon.comment,color:N.FloatButtonColor.success,counter:this.counter}}},template:`\n\t\t<FloatButton v-bind="floatButtonProps" />\n\t`};const $={name:"ChannelDialog",components:{ChatDialog:N.ChatDialog,CommentsButton:R},props:{dialogId:{type:String,required:true}},data(){return{lastScrolledChatId:0}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},layout(){return this.$store.getters["application/getLayout"]},isGuest(){return this.dialog.role===D.UserRole.guest},isChatLayout(){return this.layout.name===D.Layout.chat.name},channelComments(){return this.$store.getters["counters/getChannelComments"](this.dialog.chatId)},totalChannelCommentsCounter(){let t=0;Object.values(this.channelComments).forEach((e=>{t+=e}));return t},showCommentsButton(){return this.isChatLayout&&this.totalChannelCommentsCounter>0}},beforeUnmount(){this.readAllChannelComments()},methods:{async onCommentsButtonClick(){const t=this.getNextChatIdToJump();this.lastScrolledChatId=t;const e=this.$store.getters["messages/comments/getMessageIdByChatId"](t);if(e){this.$refs.dialog.goToMessageContext(e,{position:N.ScrollManager.scrollPosition.messageBottom});return}await this.goToMessageContextByCommentsChatId(t)},async goToMessageContextByCommentsChatId(t){this.$refs.dialog.showLoadingBar();const e=await this.$refs.dialog.getMessageService().loadContextByChatId(t);this.$refs.dialog.hideLoadingBar();if(!e){console.error("ChannelDialog: no messageId after loading context")}await this.$nextTick();this.$refs.dialog.getScrollManager().scrollToMessage(e,{position:N.ScrollManager.scrollPosition.messageBottom});await this.$nextTick();this.$refs.dialog.highlightMessage(e)},getNextChatIdToJump(){const t=this.getCommentsChatIds();t.sort(((t,e)=>t-e));if(this.lastScrolledChatId===0){return t[0]}const e=t.filter((t=>t>this.lastScrolledChatId));if(e.length===0){return t[0]}return e[0]},getCommentsChatIds(){return Object.keys(this.channelComments).map((t=>Number(t)))},readAllChannelComments(){void L.CommentsService.readAllChannelComments(this.dialogId)}},template:`\n\t\t<ChatDialog ref="dialog" :dialogId="dialogId" :resetOnExit="isGuest">\n\t\t\t<template #additional-float-button>\n\t\t\t\t<CommentsButton\n\t\t\t\t\tv-if="showCommentsButton"\n\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t:counter="totalChannelCommentsCounter"\n\t\t\t\t\t@click="onCommentsButtonClick"\n\t\t\t\t/>\n\t\t\t</template>\n\t\t</ChatDialog>\n\t`};const U={components:{ChatButton:k.ChatButton},props:{dialogId:{type:String,required:true}},computed:{ButtonSize:()=>k.ButtonSize,ButtonColor:()=>k.ButtonColor},methods:{onButtonClick(){this.getChatService().joinChat(this.dialogId)},getChatService(){if(!this.chatService){this.chatService=new H.ChatService}return this.chatService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__textarea_placeholder">\n\t\t\t<ChatButton\n\t\t\t\t:size="ButtonSize.XL"\n\t\t\t\t:color="ButtonColor.Primary"\n\t\t\t\t:text="loc('IM_CONTENT_BLOCKED_TEXTAREA_JOIN_CHANNEL_V2')"\n\t\t\t\t:isRounded="true"\n\t\t\t\t@click="onButtonClick"\n\t\t\t/>\n\t\t</div>\n\t`};const F={name:"ChannelTextarea",components:{ChatTextarea:w.ChatTextarea},props:{dialogId:{type:String,default:""}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<ChatTextarea\n\t\t\t:dialogId="dialogId"\n\t\t\t:placeholder="this.loc('IM_CONTENT_CHANNEL_TEXTAREA_PLACEHOLDER')"\n\t\t\t:withCreateMenu="false"\n\t\t\t:withMarket="false"\n\t\t\t:withAudioInput="false"\n\t\t\tclass="bx-im-channel-send-panel__container"\n\t\t/>\n\t`};const X={name:"ChannelContent",components:{BaseChatContent:y.BaseChatContent,ChannelDialog:$,ChannelTextarea:F,JoinPanel:U},props:{dialogId:{type:String,required:true}},template:`\n\t\t<BaseChatContent :dialogId="dialogId">\n\t\t\t<template #dialog>\n\t\t\t\t<ChannelDialog :dialogId="dialogId" :key="dialogId" />\n\t\t\t</template>\n\t\t\t<template #join-panel>\n\t\t\t\t<JoinPanel :dialogId="dialogId" />\n\t\t\t</template>\n\t\t\t<template #textarea="{ onTextareaMount }">\n\t\t\t\t<ChannelTextarea :dialogId="dialogId" :key="dialogId" @mounted="onTextareaMount" />\n\t\t\t</template>\n\t\t</BaseChatContent>\n\t`};const q={name:"CollabTitle",components:{ChatTitle:h.ChatTitle,LineLoader:i.LineLoader,FadeAnimation:r.FadeAnimation},inject:["currentSidebarPanel"],props:{dialogId:{type:String,required:true}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},collabInfo(){return this.$store.getters["chats/collabs/getByChatId"](this.dialog.chatId)},guestCounter(){return this.collabInfo.guestCount},userCounterText(){return p.Loc.getMessagePlural("IM_CONTENT_CHAT_HEADER_USER_COUNT",this.dialog.userCounter,{"#COUNT#":this.dialog.userCounter})},guestCounterText(){return p.Loc.getMessagePlural("IM_CONTENT_COLLAB_HEADER_GUEST_COUNT",this.guestCounter,{"#COUNT#":this.guestCounter})}},methods:{onMembersClick(){if(this.currentSidebarPanel===D.SidebarDetailBlock.members){M.EventEmitter.emit(D.EventType.sidebar.close,{panel:D.SidebarDetailBlock.members});return}M.EventEmitter.emit(D.EventType.sidebar.open,{panel:D.SidebarDetailBlock.members,dialogId:this.dialogId})},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-collab-header-title__container">\n\t\t\t<div class="bx-im-collab-header-title__title-container --ellipsis">\n\t\t\t\t<ChatTitle :dialogId="dialogId" :withAutoDelete="true" />\n\t\t\t</div>\n\t\t\t<LineLoader v-if="!dialog.inited" :width="50" :height="16" />\n\t\t\t<FadeAnimation :duration="100">\n\t\t\t\t<div v-if="dialog.inited" class="bx-im-collab-header-title__subtitle_container">\n\t\t\t\t\t<div @click="onMembersClick" class="bx-im-collab-header-title__subtitle_content --ellipsis">\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_MEMBERS')"\n\t\t\t\t\t\t\tclass="bx-im-collab-header-title__user-counter"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ userCounterText }}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span v-if="guestCounter > 0" class="bx-im-collab-header-title__guest-counter">\n\t\t\t\t\t\t\t{{ guestCounterText }}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</FadeAnimation>\n\t\t</div>\n\t`};const K=Object.freeze({addToChat:"add-to-chat",collabEntities:"collab-entities"});let G=t=>t,z;var j=babelHelpers.classPrivateFieldLooseKey("title");var W=babelHelpers.classPrivateFieldLooseKey("text");var V=babelHelpers.classPrivateFieldLooseKey("iconKey");class J{constructor(t){Object.defineProperty(this,j,{writable:true,value:void 0});Object.defineProperty(this,W,{writable:true,value:void 0});Object.defineProperty(this,V,{writable:true,value:void 0});babelHelpers.classPrivateFieldLooseBase(this,j)[j]=t.title;babelHelpers.classPrivateFieldLooseBase(this,W)[W]=t.text;babelHelpers.classPrivateFieldLooseBase(this,V)[V]=t.iconKey}render(){return p.Tag.render(z||(z=G`
			<div class="bx-im-collab-tooltip__scope bx-im-collab-tooltip__container">
				<div class="bx-im-collab-tooltip__icon --${0}"></div>
				<div class="bx-im-collab-tooltip__title-container">
					<div class="bx-im-collab-tooltip__title">
						${0}
					</div>
					<div class="bx-im-collab-tooltip__text">
						${0}
					</div>
				</div>
			</div>
		`),babelHelpers.classPrivateFieldLooseBase(this,V)[V],babelHelpers.classPrivateFieldLooseBase(this,j)[j],babelHelpers.classPrivateFieldLooseBase(this,W)[W])}}const Y={name:"EntityCounter",props:{counter:{type:Number,required:true}},computed:{preparedCounter(){return this.counter>99?"99+":this.counter.toString()}},template:`\n\t\t<span class="bx-im-collab-header__link-counter">\n\t\t\t{{ preparedCounter }}\n\t\t</span>\n\t`};const Q={name:"EntityLink",components:{EntityCounter:Y},props:{dialogId:{type:String,required:true},compactMode:{type:Boolean,required:true},type:{type:String,required:true},title:{type:String,required:true},url:{type:String,required:true},counter:{type:[Number,null],default:null}},computed:{showCounter(){return!p.Type.isNull(this.counter)&&this.counter>0}},methods:{onLinkClick(){E.Analytics.getInstance().collabEntities.onClick(this.dialogId,this.type);BX.SidePanel.Instance.open(this.url,{cacheable:false,customLeftBoundary:0})}},template:`\n\t\t<a :href="url" @click.prevent="onLinkClick" class="bx-im-collab-header__link" :class="'--' + type">\n\t\t\t<span v-if="compactMode" class="bx-im-collab-header__link-icon"></span>\n\t\t\t<span v-else class="bx-im-collab-header__link-text">{{ title }}</span>\n\t\t\t<EntityCounter v-if="showCounter" :counter="counter" />\n\t\t</a>\n\t`};const Z={name:"EntitiesPanel",components:{EntityLink:Q},props:{dialogId:{type:String,default:""},compactMode:{type:Boolean,required:true}},data(){return{highlightMode:false}},computed:{CollabEntityType:()=>D.CollabEntityType,dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},collabInfo(){return this.$store.getters["chats/collabs/getByChatId"](this.dialog.chatId)},tasksInfo(){return this.collabInfo.entities.tasks},tasksUrl(){return this.tasksInfo.url},tasksCounter(){return this.tasksInfo.counter},filesInfo(){return this.collabInfo.entities.files},filesUrl(){return this.filesInfo.url},calendarInfo(){return this.collabInfo.entities.calendar},calendarUrl(){return this.calendarInfo.url},calendarCounter(){return this.calendarInfo.counter}},mounted(){this.initPromo()},methods:{initPromo(){const t=u.PromoManager.getInstance();const e=D.PromoId.collabEntities;const n={chatId:this.dialog.chatId};if(t.needToShow(e,n)){void this.showCollabEntitiesPromo(e,n)}},async showCollabEntitiesPromo(t,e){const n=new d.Tooltip({bindElement:this.$refs["collab-entities"],content:this.renderTooltipContent(),minWidth:410,popupOptions:{offsetTop:11,offsetLeft:38,closeIcon:true,closeIconSize:l.CloseIconSize.LARGE,events:{onPopupShow:()=>{this.highlightMode=true},onPopupClose:()=>{this.highlightMode=false}}}});n.show();void u.PromoManager.getInstance().markAsWatched(t,e)},renderTooltipContent(){const t=new J({title:this.loc("IM_CONTENT_COLLAB_ONBOARDING_ENTITIES_TITLE"),text:this.loc("IM_CONTENT_COLLAB_ONBOARDING_ENTITIES_TEXT"),iconKey:K.collabEntities});return t.render()},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div\n\t\t\tclass="bx-im-collab-header__links-container"\n\t\t\t:class="{'--compact': compactMode, '--highlight': highlightMode}"\n\t\t\tref="collab-entities"\n\t\t>\n\t\t\t<EntityLink\n\t\t\t\t:dialogId="dialogId"\n\t\t\t\t:compactMode="compactMode"\n\t\t\t\t:url="tasksUrl"\n\t\t\t\t:type="CollabEntityType.tasks"\n\t\t\t\t:title="loc('IM_CONTENT_COLLAB_HEADER_LINK_TASKS')"\n\t\t\t\t:counter="tasksCounter"\n\t\t\t/>\n\t\t\t<EntityLink\n\t\t\t\t:dialogId="dialogId"\n\t\t\t\t:compactMode="compactMode"\n\t\t\t\t:url="filesUrl"\n\t\t\t\t:type="CollabEntityType.files"\n\t\t\t\t:title="loc('IM_CONTENT_COLLAB_HEADER_LINK_FILES')"\n\t\t\t/>\n\t\t\t<EntityLink\n\t\t\t\t:dialogId="dialogId"\n\t\t\t\t:compactMode="compactMode"\n\t\t\t\t:url="calendarUrl"\n\t\t\t\t:type="CollabEntityType.calendar"\n\t\t\t\t:title="loc('IM_CONTENT_COLLAB_HEADER_LINK_CALENDAR')"\n\t\t\t\t:counter="calendarCounter"\n\t\t\t/>\n\t\t</div>\n\t`};const tt={[D.PromoId.membersNotInvitedOneDayToCollab]:{title:"IM_CONTENT_COLLAB_ONBOARDING_INVITE_MEMBERS_ONE_DAY_TITLE",text:"IM_CONTENT_COLLAB_ONBOARDING_INVITE_MEMBERS_ONE_DAY_TEXT"},[D.PromoId.membersNotInvitedFourDayToCollab]:{title:"IM_CONTENT_COLLAB_ONBOARDING_INVITE_MEMBERS_FOUR_DAYS_TITLE",text:"IM_CONTENT_COLLAB_ONBOARDING_INVITE_MEMBERS_FOUR_DAYS_TEXT"}};const et={name:"AddToChatButton",components:{AddToCollab:c.AddToCollab},props:{dialogId:{type:String,default:""},withAnimation:{type:Boolean,default:false}},emits:["close"],data(){return{showAddToChatPopup:false}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)}},mounted(){this.initPromo()},methods:{openAddToChatPopup(){E.Analytics.getInstance().userAdd.onChatHeaderClick(this.dialogId);this.showAddToChatPopup=true},closeAddToChatPopup(){this.$emit("close");this.showAddToChatPopup=false},initPromo(){const t=u.PromoManager.getInstance();Object.keys(tt).forEach((e=>{const n={chatId:this.dialog.chatId};if(t.needToShow(e,n)){void this.showMembersNotInvitedPromo(e,n)}}))},showMembersNotInvitedPromo(t,e){const n=new d.Tooltip({bindElement:this.$refs["add-members"],content:this.renderTooltipContent(t),minWidth:410,popupOptions:{offsetTop:8,offsetLeft:9,closeIcon:true,closeIconSize:l.CloseIconSize.LARGE}});n.show();void u.PromoManager.getInstance().markAsWatched(t,e)},renderTooltipContent(t){const e=new J({title:this.loc(tt[t].title),text:this.loc(tt[t].text),iconKey:K.addToChat});return e.render()},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div\n\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_INVITE_POPUP_TITLE')"\n\t\t\t:class="{'--active': showAddToChatPopup}"\n\t\t\tclass="bx-im-collab-header__add-people-icon"\n\t\t\t@click="openAddToChatPopup"\n\t\t\tref="add-members"\n\t\t></div>\n\t\t<AddToCollab\n\t\t\tv-if="showAddToChatPopup"\n\t\t\t:bindElement="$refs['add-members'] ?? {}"\n\t\t\t:dialogId="dialogId"\n\t\t\t:popupConfig="{ offsetTop: 25, offsetLeft: -300 }"\n\t\t\t@close="closeAddToChatPopup"\n\t\t/>\n\t`};const nt=3;const ot={name:"PulseAnimation",props:{showPulse:{type:Boolean,default:true}},computed:{rings(){if(!this.showPulse){return[]}return Array.from({length:nt})}},template:`\n\t\t<div class="bx-im-pulse-animation__container">\n\t\t\t<slot />\n\t\t\t<div v-for="ring in rings" class="bx-im-pulse-animation__ring"></div>\n\t\t</div>\n\t`};const at={name:"CollabHeader",components:{ChatHeader:y.ChatHeader,CollabTitle:q,EntitiesPanel:Z,AddToChatButton:et,AddToChatPopup:c.AddToChat,PulseAnimation:ot},props:{dialogId:{type:String,default:""}},data(){return{compactMode:false,showAddToChatPopupDelayed:false}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isInited(){return this.dialog.inited}},watch:{async isInited(t){if(t&&this.showAddToChatPopupDelayed){await this.$nextTick();this.openAddToChatPopup()}}},created(){M.EventEmitter.subscribe(D.EventType.header.openAddToChatPopup,this.onOpenAddToChatPopup)},beforeUnmount(){M.EventEmitter.unsubscribe(D.EventType.header.openAddToChatPopup,this.onOpenAddToChatPopup)},methods:{onOpenAddToChatPopup(){if(!this.isInited){this.showAddToChatPopupDelayed=true;return}this.openAddToChatPopup()},openAddToChatPopup(){this.$refs["add-to-chat-button"].openAddToChatPopup()},onCompactModeChange(t){this.compactMode=t}},template:`\n\t\t<ChatHeader :dialogId="dialogId" @compactModeChange="onCompactModeChange" class="bx-im-collab-header__container">\n\t\t\t<template #title>\n\t\t\t\t<CollabTitle :dialogId="dialogId" />\n\t\t\t</template>\n\t\t\t<template #before-actions>\n\t\t\t\t<EntitiesPanel :dialogId="dialogId" :compactMode="compactMode" />\n\t\t\t</template>\n\t\t\t<template #add-to-chat-button>\n\t\t\t\t<PulseAnimation :showPulse="showAddToChatPopupDelayed">\n\t\t\t\t\t<AddToChatButton \n\t\t\t\t\t\t:withAnimation="showAddToChatPopupDelayed" \n\t\t\t\t\t\t:dialogId="dialogId" \n\t\t\t\t\t\tref="add-to-chat-button" \n\t\t\t\t\t\t@close="showAddToChatPopupDelayed = false"\n\t\t\t\t\t/>\n\t\t\t\t</PulseAnimation>\n\t\t\t</template>\n\t\t</ChatHeader>\n\t`};const st={name:"CollabContent",components:{BaseChatContent:y.BaseChatContent,CollabHeader:at},props:{dialogId:{type:String,required:true}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},dialogInited(){return this.dialog.inited}},watch:{dialogInited(t,e){if(!t||e){return}this.initPromo()}},methods:{initPromo(){const t=u.PromoManager.getInstance();const e=D.PromoId.collaberNotAcceptInvitationOneDay;const n={chatId:this.dialog.chatId};if(t.needToShow(e,n)){this.showNotAcceptInvitationPromo(e,n)}},showNotAcceptInvitationPromo(t,e){s.Notifier.collab.onCollaberNotAcceptInvitation();void u.PromoManager.getInstance().markAsWatched(t,e)}},template:`\n\t\t<BaseChatContent :dialogId="dialogId">\n\t\t\t<template #header>\n\t\t\t\t<CollabHeader :dialogId="dialogId" :key="dialogId" />\n\t\t\t</template>\n\t\t</BaseChatContent>\n\t`};const it={name:"MultidialogChatTitle",components:{EditableChatTitle:h.EditableChatTitle,ChatTitle:h.ChatTitle},props:{dialogId:{type:String,required:true}},emits:["newTitle"],computed:{isSupportBot(){return this.$store.getters["users/bots/isSupport"](this.dialogId)},subtitle(){return this.$Bitrix.Loc.getMessage("IM_CONTENT_CHAT_HEADER_SUPPORT_SUBTITLE")}},template:`\n\t\t<div class="bx-im-chat-header__info">\n\t\t\t<ChatTitle v-if="isSupportBot" :dialogId="dialogId" />\n\t\t\t<EditableChatTitle v-else :dialogId="dialogId" @newTitleSubmit="$emit('newTitle', $event)" />\n\t\t\t<div class="bx-im-chat-header__subtitle_container">\n\t\t\t\t<div class="bx-im-chat-header__subtitle_content">{{ subtitle }}</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const rt={name:"MultidialogHeader",components:{ChatHeader:y.ChatHeader,MultidialogChatTitle:it},props:{dialogId:{type:String,default:""}},template:`\n\t\t<ChatHeader :dialogId="dialogId">\n\t\t\t<template #title="{ onNewTitleHandler }">\n\t\t\t\t<MultidialogChatTitle\n\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t@newTitle="onNewTitleHandler"\n\t\t\t\t/>\n\t\t\t</template>\n\t\t</ChatHeader>\n\t`};const lt={name:"MultidialogContent",components:{BaseChatContent:y.BaseChatContent,MultidialogHeader:rt},props:{dialogId:{type:String,required:true}},template:`\n\t\t<BaseChatContent :dialogId="dialogId">\n\t\t\t<template #header>\n\t\t\t\t<MultidialogHeader :dialogId="dialogId" :key="dialogId" />\n\t\t\t</template>\n\t\t</BaseChatContent>\n\t`};const dt={name:"NotesContent",components:{BaseChatContent:y.BaseChatContent,ChatHeader:y.ChatHeader,ChatTitle:h.ChatTitle},props:{dialogId:{type:String,required:true}},computed:{titleType(){return Number.parseInt(this.dialogId,10)===_.Core.getUserId()?h.ChatTitleType.notes:""}},template:`\n\t\t<BaseChatContent :dialogId="dialogId">\n\t\t\t<template #header>\n\t\t\t\t<ChatHeader :dialogId="dialogId" :withCallButton="false" :withAddToChatButton="false">\n\t\t\t\t\t<template #title>\n\t\t\t\t\t\t<ChatTitle :dialogId="dialogId" :customType="titleType" :showItsYou="false"/>\n\t\t\t\t\t</template>\n\t\t\t\t</ChatHeader>\n\t\t\t</template>\n\t\t</BaseChatContent>\n\t`};const ct={name:"DefaultHeader",components:{ChatHeader:y.ChatHeader,CopilotChatHeader:m.CopilotChatHeader},props:{dialogId:{type:String,default:""}},computed:{isCopilot(){var t;return((t=this.$store.getters["chats/get"](this.dialogId))==null?void 0:t.type)===D.ChatType.copilot}},template:`\n\t\t<CopilotChatHeader v-if="isCopilot" :dialogId="dialogId" />\n\t\t<ChatHeader v-else :dialogId="dialogId" />\n\t`};const ht={name:"DefaultTextarea",components:{ChatTextarea:w.ChatTextarea,CopilotTextarea:m.CopilotTextarea},props:{dialogId:{type:String,default:""}},emits:["onTextareaMount"],computed:{isCopilot(){var t;return((t=this.$store.getters["chats/get"](this.dialogId))==null?void 0:t.type)===D.ChatType.copilot}},methods:{onTextareaMount(){this.$emit("onTextareaMount")}},template:`\n\t\t<CopilotTextarea v-if="isCopilot" :dialogId="dialogId" @mounted="onTextareaMount" />\n\t\t<ChatTextarea\n\t\t\tv-else\n\t\t\t:dialogId="dialogId"\n\t\t\t:withAudioInput="false"\n\t\t\t@mounted="onTextareaMount"\n\t\t/>\n\t`};const mt={name:"DefaultChatContent",components:{BaseChatContent:y.BaseChatContent,DefaultHeader:ct,DefaultTextarea:ht},props:{dialogId:{type:String,required:true}},template:`\n\t\t<BaseChatContent :dialogId="dialogId">\n\t\t\t<template #header>\n\t\t\t\t<DefaultHeader :dialogId="dialogId" :key="dialogId" />\n\t\t\t</template>\n\t\t\t<template #textarea="{ onTextareaMount }">\n\t\t\t\t<DefaultTextarea :dialogId="dialogId" :key="dialogId" @onTextareaMount="onTextareaMount" />\n\t\t\t</template>\n\t\t</BaseChatContent>\n\t`};const gt={props:{text:{type:String,default:""},subtext:{type:String,default:""},backgroundId:{type:[String,Number],default:""}},computed:{iconClass(){return this.isEmptyRecent?"--empty":"--default"},preparedText(){if(this.text){return this.text}if(this.isEmptyRecent){return this.loc("IM_CONTENT_CHAT_NO_CHATS_START_MESSAGE")}return this.loc("IM_CONTENT_CHAT_START_MESSAGE_V2")},preparedSubtext(){if(this.subtext){return this.subtext}return""},isEmptyRecent(){return g.RecentService.getInstance().getCollection().length===0},backgroundStyle(){if(p.Type.isStringFilled(this.backgroundId)||p.Type.isNumber(this.backgroundId)){return v.ThemeManager.getBackgroundStyleById(this.backgroundId)}return v.ThemeManager.getCurrentBackgroundStyle()}},methods:{loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-content-chat-start__container" :style="backgroundStyle">\n\t\t\t<div class="bx-im-content-chat-start__content">\n\t\t\t\t<div class="bx-im-content-chat-start__icon" :class="iconClass"></div>\n\t\t\t\t<div class="bx-im-content-chat-start__title">\n\t\t\t\t\t{{ preparedText }}\n\t\t\t\t</div>\n\t\t\t\t<div v-if="preparedSubtext" class="bx-im-content-chat-start__subtitle">\n\t\t\t\t\t{{ preparedSubtext }}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const ut={name:"ChannelEmptyState",components:{BaseEmptyState:gt},computed:{text(){return this.loc("IM_CONTENT_CHANNEL_START_MESSAGE_V3")},subtext(){return this.loc("IM_CONTENT_CHANNEL_START_MESSAGE_SUBTITLE")}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<BaseEmptyState :text="text" :subtext="subtext" />\n\t`};const Ct=[p.Loc.getMessage("IM_CONTENT_EMBEDDED_CHAT_START_TOOL_CHATS"),p.Loc.getMessage("IM_CONTENT_EMBEDDED_CHAT_START_TOOL_CALLS"),p.Loc.getMessage("IM_CONTENT_EMBEDDED_CHAT_START_TOOL_CHANNELS"),p.Loc.getMessage("IM_CONTENT_EMBEDDED_CHAT_START_TOOL_DOCS"),p.Loc.getMessage("IM_CONTENT_EMBEDDED_CHAT_START_TOOL_TASKS"),p.Loc.getMessage("IM_CONTENT_EMBEDDED_CHAT_START_TOOL_CALENDAR"),p.Loc.getMessage("IM_CONTENT_EMBEDDED_CHAT_START_TOOL_FILES"),p.Loc.getMessage("IM_CONTENT_EMBEDDED_CHAT_START_TOOL_BOARDS")];const pt={name:"EmbeddedChatPromoEmptyState",computed:{SHOWCASE_TOOLS_PHRASES:()=>Ct,canInviteUsers(){return b.FeatureManager.isFeatureAvailable(b.Feature.intranetInviteAvailable)},preparedTitle(){return p.Loc.getMessage("IM_CONTENT_EMBEDDED_CHAT_START_TITLE",{"[color]":'<span class="bx-im-embedded-promo-start__title-highlight">',"[/color]":"</span>"})},preparedInviteText(){const t="BX.Messenger.v2.Lib.InviteManager.openInviteSlider()";return p.Loc.getMessage("IM_CONTENT_EMBEDDED_CHAT_START_FEATURE_INVITE_MSGVER_2",{"[action]":`<span class="bx-im-embedded-promo-start__invite-action" onclick="${t}">`,"[/action]":"</span>"})}},mounted(){void u.PromoManager.getInstance().markAsWatched(D.PromoId.embeddedChatEmptyState)},methods:{loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-embedded-promo-start__container">\n\t\t\t<div class="bx-im-embedded-promo-start__title" v-html="preparedTitle"></div>\n\t\t\t<div class="bx-im-embedded-promo-start__tools">\n\t\t\t\t<div\n\t\t\t\t\tv-for="tool in SHOWCASE_TOOLS_PHRASES"\n\t\t\t\t\t:key="tool"\n\t\t\t\t\tclass="bx-im-embedded-promo-start__tools_item"\n\t\t\t\t>{{ tool }}</div>\n\t\t\t</div>\n\t\t\t<div class="bx-im-embedded-promo-start__content">\n\t\t\t\t<div class="bx-im-embedded-promo-start__features">\n\t\t\t\t\t<div class="bx-im-embedded-promo-start__features_content">\n\t\t\t\t\t\t<div class="bx-im-embedded-promo-start__feature_item">\n\t\t\t\t\t\t\t<div class="bx-im-embedded-promo-start__feature_icon --people"></div>\n\t\t\t\t\t\t\t<div class="bx-im-embedded-promo-start__feature_text">{{ loc('IM_CONTENT_EMBEDDED_CHAT_START_FEATURE_EASE') }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="bx-im-embedded-promo-start__feature_item">\n\t\t\t\t\t\t\t<div class="bx-im-embedded-promo-start__feature_icon --shield"></div>\n\t\t\t\t\t\t\t<div class="bx-im-embedded-promo-start__feature_text">{{ loc('IM_CONTENT_EMBEDDED_CHAT_START_FEATURE_SAFETY') }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="bx-im-embedded-promo-start__feature_item">\n\t\t\t\t\t\t\t<div class="bx-im-embedded-promo-start__feature_icon --ai"></div>\n\t\t\t\t\t\t\t<div class="bx-im-embedded-promo-start__feature_text">{{ loc('IM_CONTENT_EMBEDDED_CHAT_START_FEATURE_AI') }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-if="canInviteUsers" v-html="preparedInviteText" class="bx-im-embedded-promo-start__invite_item"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-embedded-promo-start__image"></div>\n\t\t\t</div>\n\t\t</div>\n\t`};const _t={name:"EmbeddedChatEmptyState",computed:{canInviteUsers(){return b.FeatureManager.isFeatureAvailable(b.Feature.intranetInviteAvailable)}},methods:{onInviteActionClick(){C.InviteManager.openInviteSlider()},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-embedded-chat-start__container">\n\t\t\t<div class="bx-im-embedded-chat-start__image"></div>\n\t\t\t<div class="bx-im-embedded-chat-start__title">\n\t\t\t\t{{ loc('IM_CONTENT_EMBEDDED_CHAT_START_FEATURE_SUBTITLE') }}\n\t\t\t</div>\n\t\t\t<template v-if="canInviteUsers">\n\t\t\t\t<div class="bx-im-embedded-chat-start__separator_text">\n\t\t\t\t\t{{ loc('IM_CONTENT_EMBEDDED_CHAT_START_SEPARATOR_TEXT') }}\n\t\t\t\t</div>\n\t\t\t\t<div @click="onInviteActionClick" class="bx-im-embedded-chat-start__invite">\n\t\t\t\t\t{{ loc('IM_CONTENT_EMBEDDED_CHAT_START_INVITE_ACTION') }}\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t</div>\n\t`};var It=babelHelpers.classPrivateFieldLooseKey("getUserActivityFromPull");var Tt=babelHelpers.classPrivateFieldLooseKey("requestUserData");var bt=babelHelpers.classPrivateFieldLooseKey("updateUserModel");var vt=babelHelpers.classPrivateFieldLooseKey("isPullServerWithUserStatusSupport");class Et{constructor(){Object.defineProperty(this,vt,{value:yt});Object.defineProperty(this,bt,{value:St});Object.defineProperty(this,Tt,{value:Bt});Object.defineProperty(this,It,{value:Mt})}async updateLastActivityDate(t){if(babelHelpers.classPrivateFieldLooseBase(this,vt)[vt]()){const e=await babelHelpers.classPrivateFieldLooseBase(this,It)[It](t);if(!e){return}babelHelpers.classPrivateFieldLooseBase(this,bt)[bt](t,{lastActivityDate:e});return}const e=await babelHelpers.classPrivateFieldLooseBase(this,Tt)[Tt](t);babelHelpers.classPrivateFieldLooseBase(this,bt)[bt](t,e)}}async function Mt(t){const e=await _.Core.getPullClient().getUsersLastSeen([t]).catch((t=>{console.error("UserService: error getting user activity from P&P",t);throw t}));if(!p.Type.isNumber(e[t])){return null}const n=e[t]*1e3;return new Date(Date.now()-n)}async function Bt(t){f.Logger.warn(`UserService: get actual user data for - ${t}`);const e=await _.Core.getRestClient().callMethod(D.RestMethod.imUserGet,{ID:t}).catch((t=>{console.error("UserService: error getting user data",t.error())}));return e.data()}async function St(t,e){f.Logger.warn("UserService: update user data",e);void _.Core.getStore().dispatch("users/update",{id:t,fields:e})}function yt(){return _.Core.getPullClient().isJsonRpc()}const At={name:"FeatureBlock",props:{name:{type:String,required:true},title:{type:String,required:true},subtitle:{type:String,required:true}},template:`\n\t\t<div class="bx-im-content-collab-start__block">\n\t\t\t<div class="bx-im-content-collab-start__block_icon" :class="'--' + name"></div>\n\t\t\t<div class="bx-im-content-collab-start__block_content">\n\t\t\t\t<div class="bx-im-content-collab-start__block_title">\n\t\t\t\t\t{{ title }}\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-content-collab-start__block_subtitle">\n\t\t\t\t\t{{ subtitle }}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const Lt={name:"CollabEmptyState",components:{FeatureBlock:At,ChatButton:k.ChatButton},computed:{ButtonSize:()=>k.ButtonSize,canCreateCollab(){const t=b.FeatureManager.isFeatureAvailable(b.Feature.collabCreationAvailable);const e=S.PermissionManager.getInstance().canPerformActionByUserType(D.ActionByUserType.createCollab);return t&&e},createButtonColorScheme(){return{borderColor:D.Color.transparent,backgroundColor:D.Color.white,iconColor:D.Color.gray90,textColor:D.Color.gray90,hoverColor:D.Color.white,textHoverColor:D.Color.collab70}},isCurrentUserCollaber(){const t=this.$store.getters["users/get"](_.Core.getUserId(),true);return t.type===D.UserType.collaber},backgroundStyle(){return v.ThemeManager.getBackgroundStyleById(v.SpecialBackground.collab)}},methods:{onCreateClick(){E.Analytics.getInstance().chatCreate.onCollabEmptyStateCreateClick();I.Messenger.openChatCreation(T.CreatableChat.collab)},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-collab-start__container" :style="backgroundStyle">\n\t\t\t<div class="bx-im-content-collab-start__content">\n\t\t\t\t<div class="bx-im-content-collab-start__image"></div>\n\t\t\t\t<div class="bx-im-content-collab-start__title">\n\t\t\t\t\t{{ loc('IM_CONTENT_COLLAB_START_TITLE_V2') }}\n\t\t\t\t</div>\n\t\t\t\t<div v-if="isCurrentUserCollaber" class="bx-im-content-collab-start__blocks">\n\t\t\t\t\t<FeatureBlock\n\t\t\t\t\t\t:title="loc('IM_CONTENT_COLLAB_START_BLOCK_COLLABER_TITLE_1')"\n\t\t\t\t\t\t:subtitle="loc('IM_CONTENT_COLLAB_START_BLOCK_SUBTITLE_1')"\n\t\t\t\t\t\tname="collaboration"\n\t\t\t\t\t/>\n\t\t\t\t\t<FeatureBlock\n\t\t\t\t\t\t:title="loc('IM_CONTENT_COLLAB_START_BLOCK_COLLABER_TITLE_2')"\n\t\t\t\t\t\t:subtitle="loc('IM_CONTENT_COLLAB_START_BLOCK_COLLABER_SUBTITLE_2')"\n\t\t\t\t\t\tname="business"\n\t\t\t\t\t/>\n\t\t\t\t\t<FeatureBlock\n\t\t\t\t\t\t:title="loc('IM_CONTENT_COLLAB_START_BLOCK_TITLE_3')"\n\t\t\t\t\t\t:subtitle="loc('IM_CONTENT_COLLAB_START_BLOCK_SUBTITLE_3')"\n\t\t\t\t\t\tname="result"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div v-else class="bx-im-content-collab-start__blocks">\n\t\t\t\t\t<FeatureBlock\n\t\t\t\t\t\t:title="loc('IM_CONTENT_COLLAB_START_BLOCK_TITLE_1')"\n\t\t\t\t\t\t:subtitle="loc('IM_CONTENT_COLLAB_START_BLOCK_SUBTITLE_1')"\n\t\t\t\t\t\tname="collaboration"\n\t\t\t\t\t/>\n\t\t\t\t\t<FeatureBlock\n\t\t\t\t\t\t:title="loc('IM_CONTENT_COLLAB_START_BLOCK_TITLE_2')"\n\t\t\t\t\t\t:subtitle="loc('IM_CONTENT_COLLAB_START_BLOCK_SUBTITLE_2')"\n\t\t\t\t\t\tname="business"\n\t\t\t\t\t/>\n\t\t\t\t\t<FeatureBlock\n\t\t\t\t\t\t:title="loc('IM_CONTENT_COLLAB_START_BLOCK_TITLE_3')"\n\t\t\t\t\t\t:subtitle="loc('IM_CONTENT_COLLAB_START_BLOCK_SUBTITLE_3')"\n\t\t\t\t\t\tname="result"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<ChatButton\n\t\t\t\t\tv-if="canCreateCollab"\n\t\t\t\t\t:size="ButtonSize.XXL"\n\t\t\t\t\t:customColorScheme="createButtonColorScheme"\n\t\t\t\t\t:text="loc('IM_CONTENT_COLLAB_START_CREATE_BUTTON')"\n\t\t\t\t\t:isRounded="true"\n\t\t\t\t\t@click="onCreateClick"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t`};const ft={name:"ChatOpener",components:{BaseChatContent:y.BaseChatContent,ChannelContent:X,CollabContent:st,MultidialogContent:lt,EmptyState:gt,ChannelEmptyState:ut,NotesContent:dt,DefaultChatContent:mt},props:{dialogId:{type:String,required:true}},emits:["close"],computed:{layout(){return this.$store.getters["application/getLayout"]},dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isUser(){return this.dialog.type===D.ChatType.user},isChannel(){return a.ChannelManager.isChannel(this.dialogId)},isCollab(){return this.dialog.type===D.ChatType.collab},isRecentChat(){return[D.ChatType.copilot,D.ChatType.chat].includes(this.dialog.type)},isMultidialog(){return this.$store.getters["sidebar/multidialog/isSupport"](this.dialogId)},isNotes(){return Number.parseInt(this.dialogId,10)===_.Core.getUserId()},isGuest(){return this.dialog.role===D.UserRole.guest},emptyStateComponent(){var t;const e={[D.Layout.channel.name]:ut,[D.Layout.collab.name]:Lt,[D.Layout.chat.name]:this.getChatEmptyStateComponent(),default:gt};return(t=e[this.layout.name])!=null?t:e.default}},watch:{dialogId(t,e){f.Logger.warn(`ChatContent: switching from ${e||"empty"} to ${t}`);this.onChatChange()}},created(){if(!this.dialogId){return}this.onChatChange()},methods:{async onChatChange(){if(this.dialogId===""){return}if(o.Utils.dialog.isExternalId(this.dialogId)){const t=await this.getChatService().prepareDialogId(this.dialogId);void n.LayoutManager.getInstance().setLayout({name:D.Layout.chat.name,entityId:t,contextId:this.layout.contextId});return}if(this.dialog.inited){f.Logger.warn(`ChatContent: chat ${this.dialogId} is already loaded`);if(this.isUser){const t=parseInt(this.dialog.dialogId,10);this.getUserService().updateLastActivityDate(t)}else if(this.isChannel&&!this.isGuest){f.Logger.warn(`ChatContent: channel ${this.dialogId} is loaded, loading comments metadata`);void this.getChatService().loadCommentInfo(this.dialogId)}E.Analytics.getInstance().onOpenChat(this.dialog);return}if(this.dialog.loading){f.Logger.warn(`ChatContent: chat ${this.dialogId} is loading`);return}if(this.layout.contextId){await this.loadChatWithContext();E.Analytics.getInstance().onOpenChat(this.dialog);return}await this.loadChat();E.Analytics.getInstance().onOpenChat(this.dialog)},async loadChatWithContext(){f.Logger.warn(`ChatContent: loading chat ${this.dialogId} with context - ${this.layout.contextId}`);await this.getChatService().loadChatWithContext(this.dialogId,this.layout.contextId).catch((t=>{this.sendAnalytics(t);I.Messenger.openChat()}));f.Logger.warn(`ChatContent: chat ${this.dialogId} is loaded with context of ${this.layout.contextId}`)},async loadChat(){f.Logger.warn(`ChatContent: loading chat ${this.dialogId}`);await this.getChatService().loadChatWithMessages(this.dialogId).catch((()=>{I.Messenger.openChat()}));f.Logger.warn(`ChatContent: chat ${this.dialogId} is loaded`)},sendAnalytics(t){if(t.code!==D.ErrorCode.message.notFound){return}E.Analytics.getInstance().messageDelete.onNotFoundNotification({dialogId:this.dialogId})},getChatEmptyStateComponent(){const t=n.LayoutManager.getInstance().isEmbeddedMode();const e=u.PromoManager.getInstance().needToShow(D.PromoId.embeddedChatEmptyState);if(!t){return gt}return e?pt:_t},getChatService(){if(!this.chatService){this.chatService=new H.ChatService}return this.chatService},getUserService(){if(!this.userService){this.userService=new Et}return this.userService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-default-chat__container">\n\t\t\t<component :is="emptyStateComponent" v-if="!dialogId" />\n\t\t\t<ChannelContent v-else-if="isChannel" :dialogId="dialogId" />\n\t\t\t<CollabContent v-else-if="isCollab" :dialogId="dialogId" />\n\t\t\t<MultidialogContent v-else-if="isMultidialog" :dialogId="dialogId" />\n\t\t\t<NotesContent v-else-if="isNotes" :dialogId="dialogId" />\n\t\t\t<DefaultChatContent v-else-if="isRecentChat" :dialogId="dialogId" />\n\t\t\t<BaseChatContent v-else :dialogId="dialogId" />\n\t\t</div>\n\t`};const xt={name:"SubscribeToggle",components:{Toggle:A.Toggle},props:{dialogId:{type:String,required:true}},data(){return{}},computed:{ToggleSize:()=>A.ToggleSize,dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},postMessageId(){return this.$store.getters["messages/comments/getMessageIdByChatId"](this.dialog.chatId)},isSubscribed(){return this.$store.getters["messages/comments/isUserSubscribed"](this.postMessageId)}},methods:{onToggleClick(){if(this.isSubscribed){L.CommentsService.unsubscribe(this.postMessageId);return}L.CommentsService.subscribe(this.postMessageId)},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div @click="onToggleClick" class="bx-im-comments-header-follow__container">\n\t\t\t<div class="bx-im-comments-header-follow__text">{{ loc('IM_CONTENT_COMMENTS_FOLLOW_TOGGLE_TEXT') }}</div>\n\t\t\t<Toggle :size="ToggleSize.M" :isEnabled="isSubscribed" />\n\t\t</div>\n\t`};const Nt={name:"CommentsHeader",components:{ChatHeader:y.ChatHeader,ChatAvatar:B.ChatAvatar,SubscribeToggle:xt},props:{dialogId:{type:String,default:""},channelId:{type:String,required:true}},computed:{AvatarSize:()=>B.AvatarSize,channel(){return this.$store.getters["chats/get"](this.channelId,true)},showSubscribeToggle(){return S.PermissionManager.getInstance().canPerformActionByRole(D.ActionByRole.subscribeToComments,this.dialogId)}},methods:{onBackClick(){M.EventEmitter.emit(D.EventType.dialog.closeComments)},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<ChatHeader\n\t\t\t:dialogId="dialogId"\n\t\t\tclass="bx-im-comment-header__container"\n\t\t>\n\t\t\t<template #left>\n\t\t\t\t<div @click="onBackClick" class="bx-im-comment-header__back"></div>\n\t\t\t\t<div class="bx-im-comment-header__info">\n\t\t\t\t\t<div class="bx-im-comment-header__title">{{ loc('IM_CONTENT_COMMENTS_HEADER_TITLE') }}</div>\n\t\t\t\t\t<div class="bx-im-comment-header__subtitle">\n\t\t\t\t\t\t<div class="bx-im-comment-header__subtitle_avatar">\n\t\t\t\t\t\t\t<ChatAvatar :avatarDialogId="channelId" :contextDialogId="channelId" :size="AvatarSize.XS" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="bx-im-comment-header__subtitle_text">{{ channel.name }}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t\t<template v-if="showSubscribeToggle" #before-actions>\n\t\t\t\t<SubscribeToggle :dialogId="dialogId" />\n\t\t\t</template>\n\t\t</ChatHeader>\n\t`};const Ot={name:"CommentsDialogLoader",data(){return{}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-comments-dialog-loader__container">\n\t\t\t<div class="bx-im-comments-dialog-loader__spinner"></div>\n\t\t</div>\n\t`};const Pt={name:"CommentsMessageList",components:{MessageList:O.MessageList,CommentsDialogLoader:Ot,AuthorGroup:O.AuthorGroup,...O.MessageComponents},props:{dialogId:{type:String,required:true}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},showPostMessage(){return this.dialog.inited&&!this.dialog.hasPrevPage},postMessageId(){return this.$store.getters["messages/comments/getMessageIdByChatId"](this.dialog.chatId)},postMessage(){return this.$store.getters["messages/getById"](this.postMessageId)},postAuthorGroup(){if(!this.dialog.inited){return null}const t=new O.CollectionManager(this.dialogId);return t.formatAuthorGroup(this.postMessage)}},methods:{onPostMessageMouseUp(t,e){this.$refs.messageList.onMessageMouseUp(t,e)},getMessageComponentName(t){return new P.MessageComponentManager(t).getName()}},template:`\n\t\t<MessageList\n\t\t\t:dialogId="dialogId"\n\t\t\tref="messageList"\n\t\t>\n\t\t\t<template #loader>\n\t\t\t\t<CommentsDialogLoader />\n\t\t\t</template>\n\t\t\t<template v-if="showPostMessage" #before-messages>\n\t\t\t\t<div class="bx-im-comments-message-list__channel-post">\n\t\t\t\t\t<AuthorGroup :item="postAuthorGroup" :contextDialogId="dialogId" :withAvatarMenu="false">\n\t\t\t\t\t\t<template #message>\n\t\t\t\t\t\t\t<component\n\t\t\t\t\t\t\t\t:is="getMessageComponentName(postMessage)"\n\t\t\t\t\t\t\t\t:item="postMessage"\n\t\t\t\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t\t\t\t:key="postMessage.id"\n\t\t\t\t\t\t\t\t@mouseup="onPostMessageMouseUp(postMessage, $event)"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t</component>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t</AuthorGroup>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t</MessageList>\n\t`};const Dt={name:"CommentsDialog",components:{ChatDialog:N.ChatDialog,CommentsMessageList:Pt,PinnedMessages:N.PinnedMessages},props:{dialogId:{type:String,required:true}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},dialogInited(){return this.dialog.inited},postMessageId(){return this.$store.getters["messages/comments/getMessageIdByChatId"](this.dialog.chatId)},postMessage(){return this.$store.getters["messages/getById"](this.postMessageId)}},methods:{async goToPostMessageContext(){const t=this.$refs.dialog;const e=this.dialogInited&&!this.dialog.hasPrevPage;if(e){await t.getScrollManager().animatedScrollToMessage(this.postMessageId);t.highlightMessage(this.postMessageId);return}t.showLoadingBar();await t.getMessageService().loadFirstPage();await this.$nextTick();t.hideLoadingBar();t.getScrollManager().scrollToMessage(this.postMessageId);await this.$nextTick();t.highlightMessage(this.postMessageId)},onPinnedPostMessageClick(){this.goToPostMessageContext()}},template:`\n\t\t<ChatDialog ref="dialog" :dialogId="dialogId" :saveScrollOnExit="false" :resetOnExit="true">\n\t\t\t<template v-if="dialogInited" #pinned-panel>\n\t\t\t\t<PinnedMessages\n\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t:messages="[postMessage]"\n\t\t\t\t\t@messageClick="onPinnedPostMessageClick"\n\t\t\t\t/>\n\t\t\t</template>\n\t\t\t<template #message-list>\n\t\t\t\t<CommentsMessageList :dialogId="dialogId" />\n\t\t\t</template>\n\t\t</ChatDialog>\n\t`};const wt={name:"CommentsTextarea",components:{ChatTextarea:w.ChatTextarea},props:{dialogId:{type:String,default:""}},template:`\n\t\t<ChatTextarea\n\t\t\t:dialogId="dialogId"\n\t\t\t:withMarket="false"\n\t\t\t:withAudioInput="false"\n\t\t\tclass="bx-im-comments-send-panel__container"\n\t\t/>\n\t`};const kt={components:{ChatButton:k.ChatButton},props:{dialogId:{type:String,required:true}},computed:{ButtonSize:()=>k.ButtonSize,ButtonColor:()=>k.ButtonColor},methods:{onButtonClick(){this.getChatService().joinChat(this.dialogId)},getChatService(){if(!this.chatService){this.chatService=new H.ChatService}return this.chatService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__textarea_placeholder">\n\t\t\t<ChatButton\n\t\t\t\t:size="ButtonSize.XL"\n\t\t\t\t:color="ButtonColor.Primary"\n\t\t\t\t:text="loc('IM_CONTENT_BLOCKED_TEXTAREA_JOIN_CHANNEL_V2')"\n\t\t\t\t:isRounded="true"\n\t\t\t\t@click="onButtonClick"\n\t\t\t/>\n\t\t</div>\n\t`};const Ht={name:"CommentsContent",components:{BaseChatContent:y.BaseChatContent,CommentsHeader:Nt,CommentsDialog:Dt,CommentsTextarea:wt,JoinPanel:kt},props:{dialogId:{type:String,required:true},channelId:{type:String,required:true}},template:`\n\t\t<BaseChatContent :dialogId="dialogId">\n\t\t\t<template #header>\n\t\t\t\t<CommentsHeader :dialogId="dialogId" :channelId="channelId" :key="dialogId" />\n\t\t\t</template>\n\t\t\t<template #dialog>\n\t\t\t\t<CommentsDialog :dialogId="dialogId" :key="dialogId" />\n\t\t\t</template>\n\t\t\t<template #join-panel>\n\t\t\t\t<JoinPanel :dialogId="dialogId" />\n\t\t\t</template>\n\t\t\t<template #textarea="{ onTextareaMount }">\n\t\t\t\t<CommentsTextarea :dialogId="dialogId" :key="dialogId" @mounted="onTextareaMount" />\n\t\t\t</template>\n\t\t</BaseChatContent>\n\t`};const Rt={name:"CommentsOpener",components:{CommentsContent:Ht},props:{postId:{type:Number,required:true},channelId:{type:String,required:true}},emits:["close"],data(){return{}},computed:{dialog(){return this.$store.getters["chats/getByChatId"](this.commentsChatId)},commentInfo(){return this.$store.getters["messages/comments/getByMessageId"](this.postId)},commentsChatId(){return this.commentInfo.chatId},commentsDialogId(){if(!this.dialog){return""}return this.dialog.dialogId}},created(){this.onCreated()},methods:{async onCreated(){await this.loadChat();E.Analytics.getInstance().onOpenChat(this.dialog)},async loadChat(){f.Logger.warn(`CommentsContent: loading comments for post ${this.postId}`);await this.getChatService().loadComments(this.postId).catch((()=>{this.$emit("close")}));f.Logger.warn(`CommentsContent: comments for post ${this.postId} are loaded`)},getChatService(){if(!this.chatService){this.chatService=new H.ChatService}return this.chatService}},template:`\n\t\t<div class="bx-im-content-comments__container">\n\t\t\t<CommentsContent :dialogId="commentsDialogId" :channelId="channelId" />\n\t\t</div>\n\t`};const $t={name:"ChatContent",components:{ChatOpener:ft,CommentsOpener:Rt},props:{entityId:{type:String,default:""}},data(){return{commentsPostId:0,commentsAnimationFlag:false}},computed:{layout(){return this.$store.getters["application/getLayout"]},showComments(){return this.$store.getters["messages/comments/areOpened"]}},watch:{layout(){this.closeComments()}},created(){M.EventEmitter.subscribe(D.EventType.dialog.openComments,this.onOpenComments);M.EventEmitter.subscribe(D.EventType.dialog.closeComments,this.onCloseComments)},beforeUnmount(){M.EventEmitter.unsubscribe(D.EventType.dialog.openComments,this.onOpenComments);M.EventEmitter.unsubscribe(D.EventType.dialog.closeComments,this.onCloseComments)},methods:{onOpenComments(t){const{messageId:e}=t.getData();this.commentsPostId=e;this.commentsAnimationFlag=true;this.$store.dispatch("messages/comments/setOpened",{channelDialogId:this.entityId,commentsPostId:this.commentsPostId})},onCloseComments(){this.closeComments()},closeComments(){this.commentsPostId=0;this.$store.dispatch("messages/comments/setClosed")},onCommentsAnimationEnd(){this.commentsAnimationFlag=false}},template:`\n\t\t<ChatOpener :dialogId="entityId" :class="{'--comments-show-animation': commentsAnimationFlag}" />\n\t\t<Transition name="comments-content" @after-enter="onCommentsAnimationEnd">\n\t\t\t<CommentsOpener\n\t\t\t\tv-if="showComments"\n\t\t\t\t:postId="commentsPostId"\n\t\t\t\t:channelId="entityId"\n\t\t\t/>\n\t\t</Transition>\n\t`};t.ChatContent=$t})(this.BX.Messenger.v2.Component.Content=this.BX.Messenger.v2.Component.Content||{},BX,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Component.Animation,BX.Main,BX.UI.Dialogs,BX.Messenger.v2.Component.EntitySelector,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Component.Content,BX.Messenger.v2.Service,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX,BX.Messenger.v2.Application,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Content,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Event,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Content,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Service,BX.Messenger.v2.Lib,BX.Messenger.v2.Model,BX.Messenger.v2.Component.Dialog,BX.Messenger.v2.Component,BX.Messenger.v2.Lib,BX.Messenger.v2.Const,BX.Messenger.v2.Component,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Service);
//# sourceMappingURL=chat-content.bundle.map.js
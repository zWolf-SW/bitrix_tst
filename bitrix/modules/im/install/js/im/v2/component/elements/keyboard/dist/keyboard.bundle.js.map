{"version":3,"file":"keyboard.bundle.js","sources":["../src/components/keyboard-button.js","../src/components/keyboard-separator.js","../src/classes/action-manager.js","../src/classes/bot-service.js","../src/keyboard.js"],"sourcesContent":["import { Text } from 'main.core';\n\nimport { Logger } from 'im.v2.lib.logger';\nimport { KeyboardButtonDisplay, ColorToken } from 'im.v2.const';\nimport { Utils } from 'im.v2.lib.utils';\n\nimport type { JsonObject } from 'main.core';\nimport type { KeyboardButtonConfig } from 'im.v2.const';\n\n// @vue/component\nexport const KeyboardButton = {\n\tname: 'KeyboardButton',\n\tprops:\n\t{\n\t\tconfig: {\n\t\t\ttype: Object,\n\t\t\trequired: true,\n\t\t},\n\t\tkeyboardBlocked: {\n\t\t\ttype: Boolean,\n\t\t\trequired: true,\n\t\t},\n\t},\n\temits: ['action', 'customCommand', 'blockKeyboard'],\n\tdata(): JsonObject\n\t{\n\t\treturn {};\n\t},\n\tcomputed:\n\t{\n\t\tbutton(): KeyboardButtonConfig\n\t\t{\n\t\t\treturn this.config;\n\t\t},\n\t\tbuttonClasses(): string[]\n\t\t{\n\t\t\tconst { bgColorToken = ColorToken.base, display, disabled, wait } = this.button;\n\t\t\tconst displayClass = display === KeyboardButtonDisplay.block ? '--block' : '--line';\n\t\t\tconst classes = [displayClass, bgColorToken];\n\t\t\tif (this.keyboardBlocked || disabled)\n\t\t\t{\n\t\t\t\tclasses.push('--disabled');\n\t\t\t}\n\n\t\t\tif (wait)\n\t\t\t{\n\t\t\t\tclasses.push('--loading');\n\t\t\t}\n\n\t\t\treturn classes;\n\t\t},\n\t\tbuttonStyles(): { width?: string, backgroundColor?: string }\n\t\t{\n\t\t\tconst styles = {};\n\t\t\tconst { width } = this.button;\n\t\t\tif (width)\n\t\t\t{\n\t\t\t\tstyles.width = `${width}px`;\n\t\t\t}\n\n\t\t\treturn styles;\n\t\t},\n\t},\n\tmethods:\n\t{\n\t\tonClick()\n\t\t{\n\t\t\tif (this.keyboardBlocked || this.button.disabled || this.button.wait)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.button.action && this.button.actionValue)\n\t\t\t{\n\t\t\t\tthis.handleAction();\n\t\t\t}\n\t\t\telse if (this.button.appId)\n\t\t\t{\n\t\t\t\tLogger.warn('Messenger keyboard: open app is not implemented.');\n\t\t\t}\n\t\t\telse if (this.button.link)\n\t\t\t{\n\t\t\t\tconst preparedLink = Text.decode(this.button.link);\n\t\t\t\tUtils.browser.openLink(preparedLink);\n\t\t\t}\n\t\t\telse if (this.button.command)\n\t\t\t{\n\t\t\t\tthis.handleCustomCommand();\n\t\t\t}\n\t\t},\n\t\thandleAction()\n\t\t{\n\t\t\tthis.$emit('action', {\n\t\t\t\taction: this.button.action,\n\t\t\t\tpayload: this.button.actionValue,\n\t\t\t});\n\t\t},\n\t\thandleCustomCommand()\n\t\t{\n\t\t\tif (this.button.block)\n\t\t\t{\n\t\t\t\tthis.$emit('blockKeyboard');\n\t\t\t}\n\n\t\t\tthis.button.wait = true;\n\n\t\t\tthis.$emit('customCommand', {\n\t\t\t\tbotId: this.button.botId,\n\t\t\t\tcommand: this.button.command,\n\t\t\t\tpayload: this.button.commandParams,\n\t\t\t});\n\t\t},\n\t},\n\ttemplate: `\n\t\t<div\n\t\t\tclass=\"bx-im-keyboard-button__container\"\n\t\t\t:class=\"buttonClasses\"\n\t\t\t:style=\"buttonStyles\"\n\t\t\t@click=\"onClick\"\n\t\t>\n\t\t\t{{ button.text }}\n\t\t</div>\n\t`,\n};\n","import type { JsonObject } from 'main.core';\n\n// @vue/component\nexport const KeyboardSeparator = {\n\tname: 'KeyboardSeparator',\n\tdata(): JsonObject\n\t{\n\t\treturn {};\n\t},\n\ttemplate: `\n\t\t<div class=\"bx-im-keyboard-button__separator\"></div>\n\t`,\n};\n","import { EventEmitter } from 'main.core.events';\n\nimport { Messenger } from 'im.public';\nimport { EventType, KeyboardButtonAction } from 'im.v2.const';\nimport { SendingService } from 'im.v2.provider.service.sending';\nimport { PhoneManager } from 'im.v2.lib.phone';\nimport { Notifier } from 'im.v2.lib.notifier';\n\nimport type { ActionEvent } from '../types/events';\n\nexport class ActionManager\n{\n\t#dialogId: string;\n\t#actionHandlers: ActionConfig = {\n\t\t[KeyboardButtonAction.send]: this.#sendMessage.bind(this),\n\t\t[KeyboardButtonAction.put]: this.#insertText.bind(this),\n\t\t[KeyboardButtonAction.call]: this.#startCall.bind(this),\n\t\t[KeyboardButtonAction.copy]: this.#copyText.bind(this),\n\t\t[KeyboardButtonAction.dialog]: this.#openChat.bind(this),\n\t};\n\n\tconstructor(dialogId)\n\t{\n\t\tthis.#dialogId = dialogId;\n\t}\n\n\thandleAction(event: ActionEvent): void\n\t{\n\t\tconst { action, payload } = event;\n\t\tif (!this.#actionHandlers[action])\n\t\t{\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error('Keyboard: action not found');\n\t\t}\n\n\t\tthis.#actionHandlers[action](payload);\n\t}\n\n\t#sendMessage(payload: string): void\n\t{\n\t\tSendingService.getInstance().sendMessage({\n\t\t\ttext: payload,\n\t\t\tdialogId: this.#dialogId,\n\t\t});\n\t}\n\n\t#insertText(payload: string): void\n\t{\n\t\tEventEmitter.emit(EventType.textarea.insertText, {\n\t\t\ttext: payload,\n\t\t\tdialogId: this.#dialogId,\n\t\t});\n\t}\n\n\t#startCall(payload: string): void\n\t{\n\t\tPhoneManager.getInstance().startCall(payload);\n\t}\n\n\t#copyText(payload: string): void\n\t{\n\t\tif (BX.clipboard?.copy(payload))\n\t\t{\n\t\t\tNotifier.onCopyTextComplete();\n\t\t}\n\t}\n\n\t#openChat(payload: string): void\n\t{\n\t\tMessenger.openChat(payload);\n\t}\n}\n","import { Core } from 'im.v2.application.core';\nimport { RestMethod } from 'im.v2.const';\n\nimport type { CustomCommandEvent } from '../types/events';\n\nexport class BotService\n{\n\t#messageId: string | number;\n\t#dialogId: string;\n\n\tconstructor(params: { messageId: string | number, dialogId: string })\n\t{\n\t\tconst { messageId, dialogId } = params;\n\t\tthis.#messageId = messageId;\n\t\tthis.#dialogId = dialogId;\n\t}\n\n\tsendCommand(event: CustomCommandEvent): void\n\t{\n\t\tconst { botId, command, payload } = event;\n\n\t\tconst queryParams = {\n\t\t\tMESSAGE_ID: this.#messageId,\n\t\t\tDIALOG_ID: this.#dialogId,\n\t\t\tBOT_ID: botId,\n\t\t\tCOMMAND: command,\n\t\t\tCOMMAND_PARAMS: payload,\n\t\t};\n\n\t\tCore.getRestClient().callMethod(RestMethod.imMessageCommand, queryParams)\n\t\t\t.catch((result: RestResult) => {\n\t\t\t\tconsole.error('BotService: error sending command:', result.error());\n\t\t\t});\n\t}\n}\n","import { KeyboardButtonType, KeyboardButtonContext } from 'im.v2.const';\n\nimport { KeyboardButton } from './components/keyboard-button';\nimport { KeyboardSeparator } from './components/keyboard-separator';\n\nimport { ActionManager } from './classes/action-manager';\nimport { BotService } from './classes/bot-service';\n\nimport './keyboard.css';\n\nimport type { JsonObject } from 'main.core';\nimport type { KeyboardButtonConfig } from 'im.v2.const';\nimport type { ActionEvent, CustomCommandEvent } from './types/events';\n\nexport const Keyboard = {\n\tprops:\n\t{\n\t\tbuttons: {\n\t\t\ttype: Array,\n\t\t\trequired: true,\n\t\t},\n\t\tdialogId: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t\tmessageId: {\n\t\t\ttype: [Number, String],\n\t\t\trequired: true,\n\t\t},\n\t},\n\tcomponents: { KeyboardButton, KeyboardSeparator },\n\tdata(): JsonObject\n\t{\n\t\treturn {\n\t\t\tkeyboardBlocked: false,\n\t\t};\n\t},\n\temits: ['click'],\n\twatch:\n\t{\n\t\tbuttons()\n\t\t{\n\t\t\tthis.keyboardBlocked = false;\n\t\t},\n\t},\n\tcomputed:\n\t{\n\t\tButtonType: () => KeyboardButtonType,\n\t\tpreparedButtons(): KeyboardButtonConfig[]\n\t\t{\n\t\t\treturn this.buttons.filter((button: KeyboardButtonConfig) => {\n\t\t\t\treturn button.context !== KeyboardButtonContext.mobile;\n\t\t\t});\n\t\t},\n\t},\n\tmethods:\n\t{\n\t\tonButtonActionClick(event: ActionEvent)\n\t\t{\n\t\t\tthis.getActionManager().handleAction(event);\n\t\t},\n\t\tonButtonCustomCommandClick(event: CustomCommandEvent)\n\t\t{\n\t\t\tthis.getBotService().sendCommand(event);\n\t\t},\n\t\tgetActionManager(): ActionManager\n\t\t{\n\t\t\tif (!this.actionManager)\n\t\t\t{\n\t\t\t\tthis.actionManager = new ActionManager(this.dialogId);\n\t\t\t}\n\n\t\t\treturn this.actionManager;\n\t\t},\n\t\tgetBotService(): BotService\n\t\t{\n\t\t\tif (!this.botService)\n\t\t\t{\n\t\t\t\tthis.botService = new BotService({\n\t\t\t\t\tmessageId: this.messageId,\n\t\t\t\t\tdialogId: this.dialogId,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn this.botService;\n\t\t},\n\t},\n\ttemplate: `\n\t\t<div class=\"bx-im-keyboard__container\">\n\t\t\t<template v-for=\"button in preparedButtons\">\n\t\t\t\t<KeyboardButton\n\t\t\t\t\tv-if=\"button.type === ButtonType.button\"\n\t\t\t\t\t:config=\"button\"\n\t\t\t\t\t:keyboardBlocked=\"keyboardBlocked\"\n\t\t\t\t\t@blockKeyboard=\"keyboardBlocked = true\"\n\t\t\t\t\t@action=\"onButtonActionClick\"\n\t\t\t\t\t@customCommand=\"onButtonCustomCommandClick\"\n\t\t\t\t/>\n\t\t\t\t<KeyboardSeparator v-else-if=\"button.type === ButtonType.newLine\" />\n\t\t\t</template>\n\t\t</div>\n\t`,\n};\n"],"names":["KeyboardButton","name","props","config","type","Object","required","keyboardBlocked","Boolean","emits","data","computed","button","buttonClasses","bgColorToken","ColorToken","base","display","disabled","wait","displayClass","KeyboardButtonDisplay","block","classes","push","buttonStyles","styles","width","methods","onClick","action","actionValue","handleAction","appId","Logger","warn","link","preparedLink","Text","decode","Utils","browser","openLink","command","handleCustomCommand","$emit","payload","botId","commandParams","template","KeyboardSeparator","ActionManager","constructor","dialogId","KeyboardButtonAction","send","bind","put","call","copy","dialog","event","console","error","SendingService","getInstance","sendMessage","text","EventEmitter","emit","EventType","textarea","insertText","PhoneManager","startCall","BX","clipboard","Notifier","onCopyTextComplete","Messenger","openChat","BotService","params","messageId","sendCommand","queryParams","MESSAGE_ID","DIALOG_ID","BOT_ID","COMMAND","COMMAND_PARAMS","Core","getRestClient","callMethod","RestMethod","imMessageCommand","catch","result","Keyboard","buttons","Array","String","Number","components","watch","ButtonType","KeyboardButtonType","preparedButtons","filter","context","KeyboardButtonContext","mobile","onButtonActionClick","getActionManager","onButtonCustomCommandClick","getBotService","actionManager","botService"],"mappings":"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"}
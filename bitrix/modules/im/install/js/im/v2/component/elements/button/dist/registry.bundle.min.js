this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e){"use strict";const o={S:"S",M:"M",L:"L",XL:"XL",XXL:"XXL"};const s={Primary:"primary",PrimaryLight:"primary-light",Copilot:"copilot",Success:"success",Danger:"danger",LightBorder:"light-border",DangerBorder:"danger-border",PrimaryBorder:"primary-border",Link:"link",Collab:"collab",Delete:"delete",Forward:"forward"};const r={Plus:"plus",Link:"link",Call:"call",EndCall:"end-call",AddUser:"add-user",Camera:"camera",Delete:"delete",Forward:"forward"};const i={name:"ChatButton",props:{size:{type:String,required:true},text:{type:String,required:false,default:""},icon:{type:String,required:false,default:""},color:{type:String,required:false,default:s.Primary},customColorScheme:{type:Object,required:false,default:()=>({borderColor:"",backgroundColor:"",iconColor:"",textColor:"",hoverColor:"",textHoverColor:""})},isRounded:{type:Boolean,required:false,default:false},isDisabled:{type:Boolean,required:false,default:false},isLoading:{type:Boolean,required:false,default:false},isUppercase:{type:Boolean,required:false,default:true}},emits:["click"],computed:{buttonStyles(){const t={};if(this.hasCustomColorScheme){var e;t["--im-button__border-color"]=this.customColorScheme.borderColor;t["--im-button__background-color"]=this.customColorScheme.backgroundColor;t["--im-button__color"]=this.customColorScheme.textColor;t["--im-button__background-color_hover"]=this.customColorScheme.hoverColor;t["--im-button__color_hover"]=(e=this.customColorScheme.textHoverColor)!=null?e:this.customColorScheme.textColor}return t},buttonClasses(){const t=[`--size-${this.size.toLowerCase()}`];if(!this.hasCustomColorScheme){t.push(`--color-${this.color.toLowerCase()}`)}if(this.isRounded){t.push("--rounded")}if(this.isDisabled){t.push("--disabled")}if(this.isLoading){t.push("--loading")}if(this.isUppercase&&this.size!==o.S){t.push("--uppercase")}if(this.text===""){t.push("--no-text")}return t},iconStyles(){const t={};if(this.hasCustomColorScheme){t.backgroundColor=this.customColorScheme.iconColor}return t},iconClasses(){const t=[`--${this.icon}`];if(this.hasCustomColorScheme){t.push("--custom-color")}return t},hasCustomColorScheme(){return e.Type.isPlainObject(this.customColorScheme)&&e.Type.isStringFilled(this.customColorScheme.borderColor)&&e.Type.isStringFilled(this.customColorScheme.iconColor)&&e.Type.isStringFilled(this.customColorScheme.textColor)&&e.Type.isStringFilled(this.customColorScheme.hoverColor)}},methods:{onClick(t){if(this.isDisabled||this.isLoading){return}this.$emit("click",t)}},template:`\n\t\t<button\n\t\t\t:class="buttonClasses"\n\t\t\t:style="buttonStyles"\n\t\t\t@click.stop="onClick"\n\t\t\tclass="bx-im-button__scope bx-im-button__container"\n\t\t>\n\t\t\t<span v-if="icon" :style="iconStyles" :class="iconClasses" class="bx-im-button__icon"></span>\n\t\t\t<span class="bx-im-button__text">{{ text }}</span>\n\t\t</button>\n\t`};const n={name:"SegmentButton",props:{tabs:{type:Array,required:true,validator(t){return e.Type.isArrayFilled(t)}},activeTabId:{type:String,required:true}},emits:["segmentSelected"],methods:{isTabActive(t){return this.activeTabId===t.id},onTabClick(t){this.$emit("segmentSelected",t.id)}},template:`\n\t\t<div class="bx-im-segment-button__container">\n\t\t\t<button\n\t\t\t\tv-for="tab in tabs"\n\t\t\t\t:class="{'--active': isTabActive(tab)}"\n\t\t\t\tclass="--ellipsis"\n\t\t\t\t@click="onTabClick(tab)"\n\t\t\t>\n\t\t\t\t{{ tab.title }}\n\t\t\t</button>\n\t\t</div>\n\t`};t.ChatButton=i;t.ButtonColor=s;t.ButtonSize=o;t.ButtonIcon=r;t.SegmentButton=n})(this.BX.Messenger.v2.Component.Elements=this.BX.Messenger.v2.Component.Elements||{},BX);
//# sourceMappingURL=registry.bundle.map.js